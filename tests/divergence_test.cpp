// Generated from the script divergence/divergence.m
#include <deque>
#include <kqp/kqp.hpp>
#include <kqp/probabilities.hpp>
#include <kqp/feature_matrix/dense.hpp>
#include "main-tests.inc"


DEFINE_LOGGER(logger, "kqp.test.divergence");

// Test: Simple test
namespace kqp {

int divergence_simpleTest(std::deque<std::string> &/*args*/) {
FeatureSpace<double> fs(DenseFeatureSpace<double>::create(2));
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229036350867772853,0.832050294337843610037452890538;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858480786088989589189,0.356885131158936608208875895798;

double epsilon = 0;

Density< double > rho(fs, DenseMatrix<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, DenseMatrix<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341172106591329793
// qlogq = -1.4685464905682328318192730876
double expected_divergence = 0.85130472083789165971268175781;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("simple", divergence_simpleTest)
// Test: Simple test (with epsilon)
namespace kqp {

int divergence_simpleEpsilonTest(std::deque<std::string> &/*args*/) {
FeatureSpace<double> fs(DenseFeatureSpace<double>::create(2));
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229036350867772853,0.832050294337843610037452890538;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858480786088989589189,0.356885131158936608208875895798;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, DenseMatrix<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, DenseMatrix<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341172106591329793
// qlogq = -1.46665540747697842327568196197
double expected_divergence = 0.849413637746637251169090632175;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("simple-epsilon", divergence_simpleEpsilonTest)
// Test: 
namespace kqp {

int divergence_fullTest(std::deque<std::string> &/*args*/) {
FeatureSpace<double> fs(DenseFeatureSpace<double>::create(10));
Eigen::MatrixXd mU1(10, 5);
mU1 << 0.0245000086021997659502247302044,0.113460004965431585088886379253,0.442639771201122411703465786559,-0.381056739500028995859537417346,0.203486530188925346385175885189,-0.185619756703803373554251265887,0.438020672325103554989311760437,-0.213016909187171449291398062087,0.0649425182309832926819126441842,0.33788811394038098523395774464,0.00956736017684242656677895411121,-0.298565033127968282311570646925,-0.52297980031283797242025457308,-0.190440229008223466111715538318,0.341171733804336407835933187016,-0.393921040952723067185559102654,-0.160807930966012285756150390625,-0.116190766322140426325404405361,-0.120491225065456855625178889113,0.390475477693869144069083176873,-0.108852615885356385216908847724,0.0302464214465069450299417042061,-0.410104933254612669113470246884,-0.069676877117759564161936225446,0.217894074761299627596145001007,-0.0362363726065117325303432949113,0.068941167861741231570604782064,0.194250985677893978076369307928,0.620412994731545541782224972849,0.312873533613291010535562008954,-0.326879787956748657506977906451,0.200108948625681626332095675025,0.215538243998972867121466379103,0.341160921610731748820910524955,0.273986058977524149504745309969,0.0766108629360924553441947182364,-0.521365865742542955452165642782,0.438631388029747881773801054806,-0.179677088307395788069342756899,0.449159096961859738428302080138,0.77740926873424331944306686637,-0.0513804711468787631001298166211,-0.145609969287310819785474791388,0.299360393861315410291012995003,0.28757748086161843970032236939,0.281838564998736773592469262439,0.600075668134903650319245116407,0.0755623555354200532319097760592,-0.414408237512948751657404500293,0.265847448011219344987665635927;
Eigen::MatrixXd mU2(10, 6);
mU2 << 0.00573186057287327146991806614551,-0.326545195089198381221962108611,-0.225912250976517625655759502479,-0.0448353285123281111723692049509,0.0495850391266217729868692742912,0.086770970616243434103687093284,-0.167575468465168908593909691263,-0.181246063489863773465771146221,0.444190832215638931046441939543,0.537953185697062741255081164127,-0.249248223207270414025771287925,0.244834468017707779230462961095,0.120140493932348005334809215583,-0.199424382267644167976428093425,0.459999278775267472774146426673,0.0285729037105948747987671509918,0.53113640569636011434795364039,0.391513838283211901281077871317,0.325038763499712057836177336867,0.10597764205278289995071361318,-0.222136986411505088501172622273,-0.203906656017181692197581810433,0.407824409568844026274803127308,0.323656950745738136721030286935,-0.489393297376374603047111122578,0.163285823255981482615695199456,0.195257459481993578265246469527,-0.19295549798960229259670029478,-0.020467396500210705001521205304,0.451951002397417866962570087708,-0.269171831409980744087562243294,-0.224966202830937767043195663064,-0.0954135006772896532289962578943,-0.613022539109964625936299853493,-0.325833040059124223741804371457,0.321476908199456734571697325009,0.449225924858914216208916059259,-0.446500644780141398015871345706,-0.249920748194117470220021459681,0.153533038613273109529444582222,-0.184752186327209466654153402487,0.37971478124744345583607696426,0.44353741852064293427204688669,0.653525111034329198034242836002,0.218809288549012465052712173019,-0.111116246775420729475669645581,-0.258981863983614002400202025456,0.258798009300381215425090886129,0.0635470698673968742431483747168,0.0966839658892576919724248796228,-0.24624738646893307159047026289,0.262961775604000080885924717222,-0.436048445677568952127955981268,0.270275713342279289008729392663,-0.370506132823417211330507825551,0.310546320025761934946473274977,-0.522024051321086202115395735746,0.384844463111627343998577543971,0.298430409157651177487480254058,0.287531176716010361538167217077;
Eigen::VectorXd mS1(5);
mS1 << 9.91064409703647085217214561482e-09,0.129632602882299330371296264275,0.240958268350284859904419931809,0.258674663884881195219378469119,0.926402676727369867037964468182;
Eigen::VectorXd mS2(6);
mS2 << 0.0760737602122713019170419102011,0.104863089692889585591295542599,0.166420496737749001869843823442,0.197339919171145294907177003552,0.335590443027607043813276277433,0.896636350223906752887614857173;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, DenseMatrix<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, DenseMatrix<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.546093926823767339406856535788
// qlogq = -1.77332893446164141515453138709
double expected_divergence = 1.22723500763787418676997731382;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("full", divergence_fullTest)
// Test: 
namespace kqp {

int divergence_zeroTest(std::deque<std::string> &/*args*/) {
FeatureSpace<double> fs(DenseFeatureSpace<double>::create(10));
Eigen::MatrixXd mU1(10, 5);
mU1 << 0.0245000086021997659502247302044,0.113460004965431585088886379253,0.442639771201122411703465786559,-0.381056739500028995859537417346,0.203486530188925346385175885189,-0.185619756703803373554251265887,0.438020672325103554989311760437,-0.213016909187171449291398062087,0.0649425182309832926819126441842,0.33788811394038098523395774464,0.00956736017684242656677895411121,-0.298565033127968282311570646925,-0.52297980031283797242025457308,-0.190440229008223466111715538318,0.341171733804336407835933187016,-0.393921040952723067185559102654,-0.160807930966012285756150390625,-0.116190766322140426325404405361,-0.120491225065456855625178889113,0.390475477693869144069083176873,-0.108852615885356385216908847724,0.0302464214465069450299417042061,-0.410104933254612669113470246884,-0.069676877117759564161936225446,0.217894074761299627596145001007,-0.0362363726065117325303432949113,0.068941167861741231570604782064,0.194250985677893978076369307928,0.620412994731545541782224972849,0.312873533613291010535562008954,-0.326879787956748657506977906451,0.200108948625681626332095675025,0.215538243998972867121466379103,0.341160921610731748820910524955,0.273986058977524149504745309969,0.0766108629360924553441947182364,-0.521365865742542955452165642782,0.438631388029747881773801054806,-0.179677088307395788069342756899,0.449159096961859738428302080138,0.77740926873424331944306686637,-0.0513804711468787631001298166211,-0.145609969287310819785474791388,0.299360393861315410291012995003,0.28757748086161843970032236939,0.281838564998736773592469262439,0.600075668134903650319245116407,0.0755623555354200532319097760592,-0.414408237512948751657404500293,0.265847448011219344987665635927;
Eigen::MatrixXd mU2(10, 5);
mU2 << 0.0245000086021997659502247302044,0.113460004965431585088886379253,0.442639771201122411703465786559,-0.381056739500028995859537417346,0.203486530188925346385175885189,-0.185619756703803373554251265887,0.438020672325103554989311760437,-0.213016909187171449291398062087,0.0649425182309832926819126441842,0.33788811394038098523395774464,0.00956736017684242656677895411121,-0.298565033127968282311570646925,-0.52297980031283797242025457308,-0.190440229008223466111715538318,0.341171733804336407835933187016,-0.393921040952723067185559102654,-0.160807930966012285756150390625,-0.116190766322140426325404405361,-0.120491225065456855625178889113,0.390475477693869144069083176873,-0.108852615885356385216908847724,0.0302464214465069450299417042061,-0.410104933254612669113470246884,-0.069676877117759564161936225446,0.217894074761299627596145001007,-0.0362363726065117325303432949113,0.068941167861741231570604782064,0.194250985677893978076369307928,0.620412994731545541782224972849,0.312873533613291010535562008954,-0.326879787956748657506977906451,0.200108948625681626332095675025,0.215538243998972867121466379103,0.341160921610731748820910524955,0.273986058977524149504745309969,0.0766108629360924553441947182364,-0.521365865742542955452165642782,0.438631388029747881773801054806,-0.179677088307395788069342756899,0.449159096961859738428302080138,0.77740926873424331944306686637,-0.0513804711468787631001298166211,-0.145609969287310819785474791388,0.299360393861315410291012995003,0.28757748086161843970032236939,0.281838564998736773592469262439,0.600075668134903650319245116407,0.0755623555354200532319097760592,-0.414408237512948751657404500293,0.265847448011219344987665635927;
Eigen::VectorXd mS1(5);
mS1 << 9.91064409703647085217214561482e-09,0.129632602882299330371296264275,0.240958268350284859904419931809,0.258674663884881195219378469119,0.926402676727369867037964468182;
Eigen::VectorXd mS2(5);
mS2 << 9.91064409703647085217214561482e-09,0.129632602882299330371296264275,0.240958268350284859904419931809,0.258674663884881195219378469119,0.926402676727369867037964468182;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, DenseMatrix<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, DenseMatrix<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.546093926823767339406856535788
// qlogq = -0.54669449053821661532737152811
double expected_divergence = 0.000600563714449275920514992321841;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("zero", divergence_zeroTest)
