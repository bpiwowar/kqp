// Generated from the script divergence/divergence.m
#include <deque>
#include <kqp/kqp.hpp>
#include <kqp/probabilities.hpp>
#include <kqp/feature_matrix/dense.hpp>
#include "main-tests.inc"


DEFINE_LOGGER(logger, "kqp.test.divergence");

// Test: Simple test
namespace kqp {

int divergence_simpleTest(std::deque<std::string> &/*args*/) {
Space<double> fs(DenseSpace<double>::create(2));
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229036350867772853,0.832050294337843610037452890538;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858480786088989589189,0.356885131158936608208875895798;

double epsilon = 0;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341172106591329793
// plogq = -1.4685464905682328318192730876
double expected_divergence = 0.85130472083789165971268175781;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("simple", divergence_simpleTest)
// Test: Simple test (with epsilon)
namespace kqp {

int divergence_simpleEpsilonTest(std::deque<std::string> &/*args*/) {
Space<double> fs(DenseSpace<double>::create(2));
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229036350867772853,0.832050294337843610037452890538;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858480786088989589189,0.356885131158936608208875895798;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341172106591329793
// plogq = -1.46665540747697842327568196197
double expected_divergence = 0.849413637746637251169090632175;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("simpleEpsilon", divergence_simpleEpsilonTest)
// Test: 
namespace kqp {

int divergence_fullTest(std::deque<std::string> &/*args*/) {
Space<double> fs(DenseSpace<double>::create(10));
Eigen::MatrixXd mU1(10, 5);
mU1 << -0.115542618023949328343036313527,0.456229931431885504800050057383,0.261243521849588822281162947547,-0.015317297628049559091167886038,0.254980825761959017938806937309,-0.18779968940873517646572565809,-0.471728418038289354363712391205,0.0448593407101072413900588742308,-0.240849126329478802066574871787,0.441187259552537069939859293299,-0.151859687809304977346158693763,0.336646654787008781095636322789,-0.555842229640882923291655970388,0.230681931232942116771766905003,0.322057771011338755950959011898,-0.0732661288592643122896674867661,0.0796725461480789626245169188223,0.187880716112467066603031184968,0.21575939770667187933561592672,0.156732904265928396636553543431,-0.265300608983700614285083929644,0.162183235911665446504770216052,-0.44600233662988425509254852841,-0.459149151021352897039662366296,0.332006484510802279963570526888,-0.163404425575642359147465754177,-0.449700505771358782780566798465,0.160470094815331060233987159336,-0.276657090091743773641042025702,0.197103391186858545314208868149,-0.029349134093570740378087435829,0.401724941254106959753755745623,0.520975845697284389856918096484,-0.346904819125025465353928666445,0.212017061337371082174740877235,0.0162082451509038619197333730426,-0.237887183033449550739746314321,-0.102279736535881016212812255617,0.341965499851075049875248623721,0.223988194313386013156730314222,-0.445959865637283625616760218691,-0.0518395609126431206048479793935,0.280059226440806219304846536033,0.556492673555448180700011562294,0.285987302865029102694194307333,0.791114523688969839554374630097,-0.0212917175712165410161880174655,0.0223792733073705576996026422876,0.0875572208357580233917261125498,0.534848982320567101211850058462;
Eigen::MatrixXd mU2(10, 6);
mU2 << -0.0922809457871674315709853431144,0.035543356949071895634073570136,0.925547528959325571662475340418,-0.0154639773856178868588484576208,0.0654400716652616676327625100384,0.327351228530688986850805122231,-0.266096167111304959806972192382,-0.252563972962663363386326409454,-0.166624367758295033326021439279,-0.573620738850508793404969765106,0.391181118346887568559822057068,0.338573244490916802629243420597,0.146525507975716701158930277415,-0.412779641541450303954263745254,-0.148561274232568513165020362976,0.264164528422306865707014367217,-0.103269344240233193477074280509,0.339125489971016880197396403673,0.110487764600744969856194188651,0.573232315008455173277468475135,-0.0892172638835334735896154256807,-0.400250664700907976545352084941,-0.278564354879299924672153565552,0.363662579287528542337781800597,0.337519266134728046502289089403,-0.0285045851258063018263122501139,-0.0128694301431360250131952227548,0.192993821946410099021917972095,-0.48838759719845942219862422462,0.308217520383966270269837650631,0.591075349010761863510765579122,-0.252759517663477817350781151617,-0.0342774417787419030667628305764,-0.00194184983427042752966718008878,0.392644574510478239215416351726,0.351271124493838904356834973441,-0.215551855725741425828800856834,0.242841497927715560534167593687,-0.0417575887289334465868329004934,0.568750861303189636508648163726,0.274832905235271096611171515178,0.206442881051972587647114210085,-0.155138232888534927100820937085,0.0798277778542128280125922401567,-0.181686481075926109518547946209,-0.0520516112369876285392855663758,-0.271216722834902224104070000976,0.363407366216415561588348737132,-0.586051568670773681546393163444,-0.341104450893402300071244326318,-0.0668823152811674620510373756588,0.125513741846295961979151911692,-0.246393516843156024087591049465,0.26375915636737862213223593244,-0.0986080529515990789057866550138,0.435395442215681882647260181329,-0.212133062871597860565842097458,0.248083902633581265817497296666,0.389793103739270285768014900896,0.261363443259330585632937982155;
Eigen::VectorXd mS1(5);
mS1 << 1.47988612339756374523839436552e-08,0.0971420489704442197131939451538,0.265835012057104469462842644134,0.339092806270352375985766002486,0.897168455431932909682757326664;
Eigen::VectorXd mS2(6);
mS2 << 0.0817027460578716169248281175896,0.114463329387800266667696291734,0.186834159110323749786175540066,0.195333321548596672290187825638,0.267811305544543853951466871877,0.914022867666296701116834810819;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.654648565272639038070678907388
// plogq = -2.37740604421480128394250641577
double expected_divergence = 1.72275747894216224587182750838;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("full", divergence_fullTest)
// Test: 
namespace kqp {

int divergence_zeroTest(std::deque<std::string> &/*args*/) {
Space<double> fs(DenseSpace<double>::create(10));
Eigen::MatrixXd mU1(10, 5);
mU1 << -0.115542618023949328343036313527,0.456229931431885504800050057383,0.261243521849588822281162947547,-0.015317297628049559091167886038,0.254980825761959017938806937309,-0.18779968940873517646572565809,-0.471728418038289354363712391205,0.0448593407101072413900588742308,-0.240849126329478802066574871787,0.441187259552537069939859293299,-0.151859687809304977346158693763,0.336646654787008781095636322789,-0.555842229640882923291655970388,0.230681931232942116771766905003,0.322057771011338755950959011898,-0.0732661288592643122896674867661,0.0796725461480789626245169188223,0.187880716112467066603031184968,0.21575939770667187933561592672,0.156732904265928396636553543431,-0.265300608983700614285083929644,0.162183235911665446504770216052,-0.44600233662988425509254852841,-0.459149151021352897039662366296,0.332006484510802279963570526888,-0.163404425575642359147465754177,-0.449700505771358782780566798465,0.160470094815331060233987159336,-0.276657090091743773641042025702,0.197103391186858545314208868149,-0.029349134093570740378087435829,0.401724941254106959753755745623,0.520975845697284389856918096484,-0.346904819125025465353928666445,0.212017061337371082174740877235,0.0162082451509038619197333730426,-0.237887183033449550739746314321,-0.102279736535881016212812255617,0.341965499851075049875248623721,0.223988194313386013156730314222,-0.445959865637283625616760218691,-0.0518395609126431206048479793935,0.280059226440806219304846536033,0.556492673555448180700011562294,0.285987302865029102694194307333,0.791114523688969839554374630097,-0.0212917175712165410161880174655,0.0223792733073705576996026422876,0.0875572208357580233917261125498,0.534848982320567101211850058462;
Eigen::MatrixXd mU2(10, 5);
mU2 << -0.115542618023949328343036313527,0.456229931431885504800050057383,0.261243521849588822281162947547,-0.015317297628049559091167886038,0.254980825761959017938806937309,-0.18779968940873517646572565809,-0.471728418038289354363712391205,0.0448593407101072413900588742308,-0.240849126329478802066574871787,0.441187259552537069939859293299,-0.151859687809304977346158693763,0.336646654787008781095636322789,-0.555842229640882923291655970388,0.230681931232942116771766905003,0.322057771011338755950959011898,-0.0732661288592643122896674867661,0.0796725461480789626245169188223,0.187880716112467066603031184968,0.21575939770667187933561592672,0.156732904265928396636553543431,-0.265300608983700614285083929644,0.162183235911665446504770216052,-0.44600233662988425509254852841,-0.459149151021352897039662366296,0.332006484510802279963570526888,-0.163404425575642359147465754177,-0.449700505771358782780566798465,0.160470094815331060233987159336,-0.276657090091743773641042025702,0.197103391186858545314208868149,-0.029349134093570740378087435829,0.401724941254106959753755745623,0.520975845697284389856918096484,-0.346904819125025465353928666445,0.212017061337371082174740877235,0.0162082451509038619197333730426,-0.237887183033449550739746314321,-0.102279736535881016212812255617,0.341965499851075049875248623721,0.223988194313386013156730314222,-0.445959865637283625616760218691,-0.0518395609126431206048479793935,0.280059226440806219304846536033,0.556492673555448180700011562294,0.285987302865029102694194307333,0.791114523688969839554374630097,-0.0212917175712165410161880174655,0.0223792733073705576996026422876,0.0875572208357580233917261125498,0.534848982320567101211850058462;
Eigen::VectorXd mS1(5);
mS1 << 1.47988612339756374523839436552e-08,0.0971420489704442197131939451538,0.265835012057104469462842644134,0.339092806270352375985766002486,0.897168455431932909682757326664;
Eigen::VectorXd mS2(5);
mS2 << 1.47988612339756374523839436552e-08,0.0971420489704442197131939451538,0.265835012057104469462842644134,0.339092806270352375985766002486,0.897168455431932909682757326664;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.654648565272639038070678907388
// plogq = -0.655249312993240851099585597694
double expected_divergence = 0.00060074772060181302890669030603;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("zero", divergence_zeroTest)
