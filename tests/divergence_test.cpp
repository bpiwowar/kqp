// Generated from the script divergence/divergence.m
#include <deque>
#include <kqp/kqp.hpp>
#include <kqp/probabilities.hpp>
#include <kqp/feature_matrix/dense.hpp>
#include "main-tests.inc"


DEFINE_LOGGER(logger, "kqp.test.divergence");

// Test: Simple test
namespace kqp {

int divergence_simpleTest(std::deque<std::string> &/*args*/) {
boost::shared_ptr<SpaceBase<double>> fs(DenseSpace<double>::create(2));
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229036350867772853,0.832050294337843610037452890538;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858480786088989589189,0.356885131158936608208875895798;

double epsilon = 0;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Identity<double>(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Identity<double>(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341172106591329793
// plogq = -1.4685464905682328318192730876
double expected_divergence = 0.85130472083789165971268175781;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("simple", divergence_simpleTest)
// Test: Simple test (with epsilon)
namespace kqp {

int divergence_simpleEpsilonTest(std::deque<std::string> &/*args*/) {
boost::shared_ptr<SpaceBase<double>> fs(DenseSpace<double>::create(2));
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229036350867772853,0.832050294337843610037452890538;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858480786088989589189,0.356885131158936608208875895798;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Identity<double>(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Identity<double>(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341172106591329793
// plogq = -1.46665540747697842327568196197
double expected_divergence = 0.849413637746637251169090632175;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("simpleEpsilon", divergence_simpleEpsilonTest)
// Test: 
namespace kqp {

int divergence_fullTest(std::deque<std::string> &/*args*/) {
boost::shared_ptr<SpaceBase<double>> fs(DenseSpace<double>::create(10));
Eigen::MatrixXd mU1(10, 4);
mU1 << 0.0327397785858118406387973209348,0.0898072300758665648112710755413,0.0294623777803048048085088339576,0.164873745445826835887004335746,0.518226058418345791878323325363,-0.227439646470424611246485824267,0.432425657697377063826138510194,0.349368392705772912165684829233,0.10692837182071905643976350575,-0.411778819080715452471963544667,0.0188013936509698574572890805712,0.434300147235842370907477061337,-0.285793174352533818627364325948,-0.237184642077694851636238126957,-0.207947802622305527586732409873,0.434283916113554824267595222409,0.488534600094043647278141406787,0.462608525307123874537040819632,-0.393011763126751068053721382967,0.303076362942866328609170523123,-0.00294801522367378349837041540127,-0.151008470315432657971044250189,-0.290030623902818029957728640511,0.371630879570729155680908206705,-0.433995100605384320768820316516,0.25320182505843796816336066513,-0.313143618995810724126016566515,0.309548615882363042928204777127,0.133642672399220840961930889534,0.538940010193996399401328289969,0.25601825101860448130608460815,0.187598022439219219714701125667,-0.260180883232868531695913816293,-0.0867775818967161383099551130726,0.361957171790297738134256633202,0.172127382634133213601401735104,-0.353097004447055995424165075747,0.339822696481513808475227733652,0.485129842311883108241232775981,0.287981326931782688482996945822;
Eigen::MatrixXd mU2(10, 6);
mU2 << 0.120693136446418700091776088357,0.196865852546584840787602388446,-0.476437658480936887528400802694,-0.032708262980595925739635276841,0.238745627367809520880115314867,0.342061311970657866421419157632,0.313623695023359738698331966589,0.591087943799997850291561007907,0.0455308152652142902883092290267,0.0331034832444218399261082197427,-0.339950597609297133772088272963,0.278230413996064185333523255395,-0.254598844721092898435443885319,-0.057262496476978223813869561809,-0.0915065791101375425320441081567,-0.0246867868193862624592860299799,0.297445796909355297810151341764,0.222717832475346350085132485219,-0.042747478515914413832454954445,-0.12063458575214616730342243045,-0.115337245840382990325068135462,0.562910371343869231353096438397,-0.438171346272922146436457069285,0.311898917348913895519757488728,-0.559040057447177440863583797181,-0.0812222502403139451354618927326,-0.167394219091659218756618088264,0.420221596193224689042011732454,0.138520902988445271386552803961,0.262275898511336480467548426532,0.357238488798174269600593788709,0.116247280368455760402035537027,0.390133418153094435609773427132,0.276773089391805338088659027562,0.26412283708417100269727484374,0.396521495598070539134738510256,0.478731405439278445701489772546,-0.687925961969823029917847634351,-0.245104334453056682541216559912,-0.164073902478025168694131252778,-0.0386794481622545691101855425131,0.31460255318975982596896301402,-0.054633960553262063408741511239,0.263373435282637902155045139807,-0.229068098865814140374652652099,-0.311671311942874840195116803443,0.38839074941448242794805878475,0.263615854641484792519889879259,-0.157055669447552059825312653629,-0.176943164426418275692043380332,0.675337189113462188494452220766,-0.137635007791200331128678158166,0.171922183320898952496591505223,0.333909326922302407414377967143,-0.351347678044511557704510096301,-0.00034479551561126300365453523078,0.0201099953637903436365341747205,-0.533070937933225463822850542783,-0.525467754587601643123662142898,0.390789279184716509263353145798;
Eigen::VectorXd mS1(4);
mS1 << 0.180474071837229854686768248939,0.301328292357646465582377004466,0.334087136713758892092585028877,0.874652019206334063738950135303;
Eigen::VectorXd mS2(6);
mS2 << 0.0958439721742203459831088707688,0.136983297420432109658960939669,0.211325225025720209170998487025,0.25415239721129229133467219981,0.305045574598263313781387751078,0.877351078476165224806493370124;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Identity<double>(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Identity<double>(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.779023039829459529315158761165
// plogq = -2.13292843494614814403576019686
double expected_divergence = 1.35390539511668861472060143569;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("full", divergence_fullTest)
// Test: 
namespace kqp {

int divergence_zeroTest(std::deque<std::string> &/*args*/) {
boost::shared_ptr<SpaceBase<double>> fs(DenseSpace<double>::create(10));
Eigen::MatrixXd mU1(10, 4);
mU1 << 0.0327397785858118406387973209348,0.0898072300758665648112710755413,0.0294623777803048048085088339576,0.164873745445826835887004335746,0.518226058418345791878323325363,-0.227439646470424611246485824267,0.432425657697377063826138510194,0.349368392705772912165684829233,0.10692837182071905643976350575,-0.411778819080715452471963544667,0.0188013936509698574572890805712,0.434300147235842370907477061337,-0.285793174352533818627364325948,-0.237184642077694851636238126957,-0.207947802622305527586732409873,0.434283916113554824267595222409,0.488534600094043647278141406787,0.462608525307123874537040819632,-0.393011763126751068053721382967,0.303076362942866328609170523123,-0.00294801522367378349837041540127,-0.151008470315432657971044250189,-0.290030623902818029957728640511,0.371630879570729155680908206705,-0.433995100605384320768820316516,0.25320182505843796816336066513,-0.313143618995810724126016566515,0.309548615882363042928204777127,0.133642672399220840961930889534,0.538940010193996399401328289969,0.25601825101860448130608460815,0.187598022439219219714701125667,-0.260180883232868531695913816293,-0.0867775818967161383099551130726,0.361957171790297738134256633202,0.172127382634133213601401735104,-0.353097004447055995424165075747,0.339822696481513808475227733652,0.485129842311883108241232775981,0.287981326931782688482996945822;
Eigen::MatrixXd mU2(10, 4);
mU2 << 0.0327397785858118406387973209348,0.0898072300758665648112710755413,0.0294623777803048048085088339576,0.164873745445826835887004335746,0.518226058418345791878323325363,-0.227439646470424611246485824267,0.432425657697377063826138510194,0.349368392705772912165684829233,0.10692837182071905643976350575,-0.411778819080715452471963544667,0.0188013936509698574572890805712,0.434300147235842370907477061337,-0.285793174352533818627364325948,-0.237184642077694851636238126957,-0.207947802622305527586732409873,0.434283916113554824267595222409,0.488534600094043647278141406787,0.462608525307123874537040819632,-0.393011763126751068053721382967,0.303076362942866328609170523123,-0.00294801522367378349837041540127,-0.151008470315432657971044250189,-0.290030623902818029957728640511,0.371630879570729155680908206705,-0.433995100605384320768820316516,0.25320182505843796816336066513,-0.313143618995810724126016566515,0.309548615882363042928204777127,0.133642672399220840961930889534,0.538940010193996399401328289969,0.25601825101860448130608460815,0.187598022439219219714701125667,-0.260180883232868531695913816293,-0.0867775818967161383099551130726,0.361957171790297738134256633202,0.172127382634133213601401735104,-0.353097004447055995424165075747,0.339822696481513808475227733652,0.485129842311883108241232775981,0.287981326931782688482996945822;
Eigen::VectorXd mS1(4);
mS1 << 0.180474071837229854686768248939,0.301328292357646465582377004466,0.334087136713758892092585028877,0.874652019206334063738950135303;
Eigen::VectorXd mS2(4);
mS2 << 0.180474071837229854686768248939,0.301328292357646465582377004466,0.334087136713758892092585028877,0.874652019206334063738950135303;

double epsilon = 0.00100000000000000002081668171172;

Density< double > rho(fs, Dense<double>::create(mU1), Eigen::Identity<double>(mU1.cols(),mU1.cols()), mS1, true);
Density< double > tau(fs, Dense<double>::create(mU2), Eigen::Identity<double>(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.779023039829459529315158761165
// plogq = -0.779523445840741735501921994
double expected_divergence = 0.000500406011282206186763232835801;
KQP_LOG_INFO_F(logger, "Divergence = %.10g [expected %.10g]; delta = %.10g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

DEFINE_TEST("zero", divergence_zeroTest)
