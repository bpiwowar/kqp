// Generated from the script divergence/divergence.m
#include <deque>
#include <kqp/kqp.hpp>
#include <kqp/probabilities.hpp>
#include <kqp/feature_matrix/dense.hpp>


DEFINE_LOGGER(logger, "kqp.test.divergence");

namespace kqp {

// Test: Simple test
int divergence_simpleTest(std::deque<std::string> &/*args*/) {
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229,0.832050294337844;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858481,0.356885131158937;

double epsilon = 0;

Density< DenseMatrix<double> > rho(DenseMatrix<double>(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< DenseMatrix<double> > tau(DenseMatrix<double>(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341
// qlogq = -1.46854649056823
double expected_divergence = 0.851304720837892;
KQP_LOG_INFO_F(logger, "Divergence = %g [expected %g]; delta = %g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
// Test: Simple test (with epsilon)
int divergence_simpleEpsilonTest(std::deque<std::string> &/*args*/) {
Eigen::MatrixXd mU1(2, 2);
mU1 << 1,0,0,1;
Eigen::MatrixXd mU2(2, 2);
mU2 << 1,0,0,1;
Eigen::VectorXd mS1(2);
mS1 << 0.554700196225229,0.832050294337844;
Eigen::VectorXd mS2(2);
mS2 << 0.934148276858481,0.356885131158937;

double epsilon = 0.001;

Density< DenseMatrix<double> > rho(DenseMatrix<double>(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< DenseMatrix<double> > tau(DenseMatrix<double>(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.617241769730341
// qlogq = -1.46665540747698
double expected_divergence = 0.849413637746637;
KQP_LOG_INFO_F(logger, "Divergence = %g [expected %g]; delta = %g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
// Test: 
int divergence_fullTest(std::deque<std::string> &/*args*/) {
Eigen::MatrixXd mU1(10, 4);
mU1 << 0.378944818959186,-0.00864751469752809,0.302541737222281,0.272514145328259,-0.42738666828179,-0.253542869858623,-0.56565461116034,0.326657167423432,-0.0179355324461579,0.057845235052257,0.178211789072594,0.444114100601744,0.0459248029989627,-0.0662450358915743,0.0588309393159834,0.325199724348597,0.351883144691426,-0.206138489346555,-0.479015309302114,0.279855767536053,0.184537301071565,-0.492079660053561,0.12757966489212,0.242400828885423,0.0208532377867205,0.202677812076469,-0.306336053146595,0.203645126863072,-0.205240109427001,-0.219913432659616,0.428818123601527,0.4058397084245,0.333126715957891,0.659592120990614,-0.110118909240922,0.336080722554681,-0.599919292214352,0.344629234919555,0.133032570175686,0.244610035214502;
Eigen::MatrixXd mU2(10, 6);
mU2 << -0.0683860294468285,-0.604508950793284,-0.409674134341488,-0.0525744709725816,0.517868051701957,0.235468323188864,0.0956087712513432,0.360311849757708,0.0458752019996818,0.167198646015493,-0.136459384226492,0.338864723160925,-0.537052767245685,-0.114747846325934,0.0887856640964536,-0.348110042661448,-0.347442036068343,0.256202260994732,-0.371028342848003,0.0876128039289231,0.288794765460052,0.395012468640419,0.0516733089131352,0.392172362052182,-0.0441974402989299,0.0585364212884998,0.276556308218263,-0.650116974958389,0.182324774363967,0.294283811626302,-0.0488538229432187,-0.481267141006367,0.0054766257585249,0.071375046904483,-0.507252197495961,0.211213849588849,-0.00600249511568403,0.221542863564707,-0.758351537761924,0.000629314752400622,-0.348086945626629,0.220615496275574,0.53220017305072,0.168867226052513,-0.0404460696648235,-0.307877478664179,0.0277230664283891,0.435334806982394,0.423575950008663,-0.303437740638874,0.253224974628697,0.346185282583008,-0.0598958282909081,0.371830752399885,-0.305065334837977,0.281397958737092,-0.146314888473256,0.22290226413604,0.416818548790384,0.320353954610003;
Eigen::VectorXd mS1(4);
mS1 << 0.184275385329949,0.268217079827399,0.319425179898452,0.889982996970842;
Eigen::VectorXd mS2(6);
mS2 << 0.0828391201687178,0.0897931593821199,0.163059931446767,0.201099942703649,0.236811567486042,0.928420929322373;

double epsilon = 0.001;

Density< DenseMatrix<double> > rho(DenseMatrix<double>(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< DenseMatrix<double> > tau(DenseMatrix<double>(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.721728683956772
// qlogq = -1.93588393713167
double expected_divergence = 1.2141552531749;
KQP_LOG_INFO_F(logger, "Divergence = %g [expected %g]; delta = %g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
// Test: 
int divergence_zeroTest(std::deque<std::string> &/*args*/) {
Eigen::MatrixXd mU1(10, 4);
mU1 << 0.378944818959186,-0.00864751469752809,0.302541737222281,0.272514145328259,-0.42738666828179,-0.253542869858623,-0.56565461116034,0.326657167423432,-0.0179355324461579,0.057845235052257,0.178211789072594,0.444114100601744,0.0459248029989627,-0.0662450358915743,0.0588309393159834,0.325199724348597,0.351883144691426,-0.206138489346555,-0.479015309302114,0.279855767536053,0.184537301071565,-0.492079660053561,0.12757966489212,0.242400828885423,0.0208532377867205,0.202677812076469,-0.306336053146595,0.203645126863072,-0.205240109427001,-0.219913432659616,0.428818123601527,0.4058397084245,0.333126715957891,0.659592120990614,-0.110118909240922,0.336080722554681,-0.599919292214352,0.344629234919555,0.133032570175686,0.244610035214502;
Eigen::MatrixXd mU2(10, 4);
mU2 << 0.378944818959186,-0.00864751469752809,0.302541737222281,0.272514145328259,-0.42738666828179,-0.253542869858623,-0.56565461116034,0.326657167423432,-0.0179355324461579,0.057845235052257,0.178211789072594,0.444114100601744,0.0459248029989627,-0.0662450358915743,0.0588309393159834,0.325199724348597,0.351883144691426,-0.206138489346555,-0.479015309302114,0.279855767536053,0.184537301071565,-0.492079660053561,0.12757966489212,0.242400828885423,0.0208532377867205,0.202677812076469,-0.306336053146595,0.203645126863072,-0.205240109427001,-0.219913432659616,0.428818123601527,0.4058397084245,0.333126715957891,0.659592120990614,-0.110118909240922,0.336080722554681,-0.599919292214352,0.344629234919555,0.133032570175686,0.244610035214502;
Eigen::VectorXd mS1(4);
mS1 << 0.184275385329949,0.268217079827399,0.319425179898452,0.889982996970842;
Eigen::VectorXd mS2(4);
mS2 << 0.184275385329949,0.268217079827399,0.319425179898452,0.889982996970842;

double epsilon = 0.001;

Density< DenseMatrix<double> > rho(DenseMatrix<double>(mU1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU1.cols(),mU1.cols()), mS1, true);
Density< DenseMatrix<double> > tau(DenseMatrix<double>(mU2), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>::Identity(mU2.cols(),mU2.cols()), mS2, true);
double divergence = rho.computeDivergence(tau, epsilon);
// plogp = -0.721728683956772
// qlogq = -0.722329056110237
double expected_divergence = 0.00060037215346509;
KQP_LOG_INFO_F(logger, "Divergence = %g [expected %g]; delta = %g", %divergence %expected_divergence %(std::abs(divergence - expected_divergence)));

return std::abs(divergence - expected_divergence) < 1e-10 ? 0 : 1;
}
} // end namespace kqp

