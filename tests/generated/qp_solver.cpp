

// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_simple() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =    1.000000e+00;
a <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  4.000000000000000e-01 ;
a.adjointInPlace();
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
nu <<  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (8 x 6) and q
     pcost       dcost       gap    pres   dres
 0: -4.4722e-01  1.1439e+00  1e+01  4e+00  5e+00
 1:  6.3654e-01 -4.6929e-01  1e+00  1e-01  1e-01
 2: -7.8202e-02 -1.9056e-01  1e-01  8e-03  1e-02
 3: -1.1546e-01 -1.2906e-01  1e-02  2e-16  1e-15
 4: -1.2415e-01 -1.2509e-01  9e-04  1e-16  7e-16
 5: -1.2499e-01 -1.2500e-01  1e-05  2e-16  8e-15
 6: -1.2500e-01 -1.2500e-01  1e-07  5e-20  4e-14
 7: -1.2500e-01 -1.2500e-01  1e-09  5e-16  4e-14
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  5.000000001184021e-01 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.331355550641843e-08 ,  5.000000001578172e-01 ,  1.334554256497836e-08 ;

            double error_x = (result.x - s_x).norm() / (double)s_x.rows();

            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % (EPSILON * s_x.norm()));
            KQP_LOG_ASSERT(logger, error_x < EPSILON * s_x.norm(), "Error for x is too high");
            return 0;
        }



// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_random() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 8;
int r = 5;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =    1.000000e+00;
a <<  3.747030205016403e-01 ,  4.389616300445631e-01 ,  5.084264882499818e-01 ,  7.784426150001458e-01 ,  5.209384176131452e-01 ,  3.932550949642261e-01 ,  4.896935204622582e-01 ,  2.957496396690706e-02 ,  4.348729035652743e-02 ,  7.033820886038360e-01 ,  9.831877173096739e-01 ,  5.931837303800576e-01 ,  3.935996863779140e-01 ,  1.703491968556813e-01 ,  5.022385584334831e-01 ,  9.820766375385342e-01 ,  7.705231398308006e-01 ,  5.396174484497788e-01 ,  8.602897789205496e-01 ,  2.321761280630146e-01 ,  5.137716631876370e-01 ,  9.524673882682695e-01 ,  5.777948078012031e-01 ,  4.591317319106684e-01 ,  2.692794774414212e-01 ,  5.479963094662489e-01 ,  9.571162814602269e-01 ,  5.709129450392925e-03 ,  7.836552326153898e-01 ,  8.204859119254819e-01 ,  8.861795808260082e-01 ,  7.405034118331963e-01 ,  8.091399008724796e-01 ,  5.186782835230020e-01 ,  5.613578647783790e-01 ,  4.260906796881502e-01 ,  5.612329752074041e-02 ,  8.700101551766398e-01 ,  5.699993338763802e-01 ,  1.998394201771431e-01 ;
a.adjointInPlace();
g <<  1.849269677252957e+00 ,  1.943043025337374e+00 ,  8.562963225913708e-01 ,  9.668409737801792e-01 ,  1.876596362526827e+00 ,  1.840792706346804e+00 ,  1.908338889801414e+00 ,  1.282722716565598e+00 ,  1.943043025337374e+00 ,  3.249642234405827e+00 ,  2.169346792031195e+00 ,  1.141323426556760e+00 ,  2.289268113151457e+00 ,  2.669806969805496e+00 ,  3.160786663961761e+00 ,  2.153607183140493e+00 ,  8.562963225913708e-01 ,  2.169346792031195e+00 ,  2.921743560181752e+00 ,  1.145595638126576e+00 ,  1.786750132029334e+00 ,  1.789063170172730e+00 ,  2.736479299675600e+00 ,  2.377200690354755e+00 ,  9.668409737801792e-01 ,  1.141323426556760e+00 ,  1.145595638126576e+00 ,  9.304854374385637e-01 ,  1.402354907146323e+00 ,  1.215194237527640e+00 ,  1.352878126430849e+00 ,  1.346243143495991e+00 ,  1.876596362526827e+00 ,  2.289268113151457e+00 ,  1.786750132029334e+00 ,  1.402354907146323e+00 ,  3.049697249759795e+00 ,  2.276071140928117e+00 ,  2.569426567147142e+00 ,  2.148298259587096e+00 ,  1.840792706346804e+00 ,  2.669806969805496e+00 ,  1.789063170172730e+00 ,  1.215194237527640e+00 ,  2.276071140928117e+00 ,  2.573669195122888e+00 ,  2.754650499350412e+00 ,  1.949115435191794e+00 ,  1.908338889801414e+00 ,  3.160786663961761e+00 ,  2.736479299675600e+00 ,  1.352878126430849e+00 ,  2.569426567147142e+00 ,  2.754650499350412e+00 ,  3.598313739354603e+00 ,  2.533599341891459e+00 ,  1.282722716565598e+00 ,  2.153607183140493e+00 ,  2.377200690354755e+00 ,  1.346243143495991e+00 ,  2.148298259587096e+00 ,  1.949115435191794e+00 ,  2.533599341891459e+00 ,  2.355910828303620e+00 ;
nu <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (80 x 48) and q
     pcost       dcost       gap    pres   dres
 0: -1.0149e+02 -7.4445e+01  2e+02  2e+01  8e-01
 1: -9.5865e+01 -1.0512e+02  9e+00  3e-01  2e-02
 2: -9.9646e+01 -1.0088e+02  1e+00  2e-02  1e-03
 3: -1.0003e+02 -1.0023e+02  2e-01  2e-03  1e-04
 4: -1.0011e+02 -1.0014e+02  3e-02  2e-04  1e-05
 5: -1.0012e+02 -1.0012e+02  1e-03  4e-06  2e-07
 6: -1.0012e+02 -1.0012e+02  6e-05  1e-07  6e-09
 7: -1.0012e+02 -1.0012e+02  2e-06  2e-09  1e-10
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  4.752884521526686e-01 ,  1.995848838087158e-01 ,  3.784178879776503e-01 ,  1.341498066458658e-07 ,  5.068449962546266e-01 ,  6.514950491173618e-01 ,  4.120100377943183e-01 ,  6.523854011048728e-01 ,  2.712596908231910e-02 ,  4.792198901920437e-01 ,  8.386486984707829e-01 ,  5.010305122583972e-07 ,  5.253812146264444e-01 ,  3.504304106368963e-01 ,  8.003801188047065e-01 ,  9.940412811379267e-01 ,  4.752887906792948e-01 ,  4.865903214203594e-01 ,  4.719177631514941e-01 ,  4.524637941715810e-07 ,  5.253816334711431e-01 ,  8.310210116284582e-01 ,  8.312188586172958e-01 ,  9.940409823535143e-01 ,  4.752887632073560e-01 ,  4.865903366009784e-01 ,  8.386487570420266e-01 ,  4.959766994918537e-07 ,  5.253816583786797e-01 ,  8.310210259517858e-01 ,  8.312188869541541e-01 ,  9.940413060404805e-01 ,  4.752887130672480e-01 ,  4.865896374040005e-01 ,  5.947195826847475e-02 ,  3.897552923628487e-07 ,  1.308169163334555e-01 ,  8.310206465355691e-01 ,  8.312174539256042e-01 ,  8.440735944656097e-01 ,  4.752888348876143e-01 ,  4.865903582862700e-01 ,  8.386487761627534e-01 ,  5.603298396763218e-07 ,  5.253816774258837e-01 ,  8.310210524747249e-01 ,  8.312189046015744e-01 ,  9.940413324751856e-01 ;

            double error_x = (result.x - s_x).norm() / (double)s_x.rows();

            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % (EPSILON * s_x.norm()));
            KQP_LOG_ASSERT(logger, error_x < EPSILON * s_x.norm(), "Error for x is too high");
            return 0;
        }



// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_simple_nu() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =    1.000000e+00;
a <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  4.000000000000000e-01 ;
a.adjointInPlace();
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
nu <<  1.058968888114840e+00 ,  1.021357713232695e+00 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (8 x 6) and q
     pcost       dcost       gap    pres   dres
 0: -4.2927e-01  1.1456e+00  1e+01  4e+00  5e+00
 1:  6.4090e-01 -4.8175e-01  1e+00  1e-01  1e-01
 2: -6.2832e-02 -1.7582e-01  1e-01  9e-03  1e-02
 3: -1.0106e-01 -1.1471e-01  1e-02  3e-16  1e-15
 4: -1.0991e-01 -1.1077e-01  9e-04  3e-16  7e-16
 5: -1.1068e-01 -1.1069e-01  1e-05  1e-16  8e-15
 6: -1.1069e-01 -1.1069e-01  1e-07  2e-16  7e-15
 7: -1.1069e-01 -1.1069e-01  1e-09  8e-17  3e-14
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  4.705155560626779e-01 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  9.537841714208144e-09 ,  4.982613352809187e-01 ,  9.771858781753684e-09 ;

            double error_x = (result.x - s_x).norm() / (double)s_x.rows();

            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % (EPSILON * s_x.norm()));
            KQP_LOG_ASSERT(logger, error_x < EPSILON * s_x.norm(), "Error for x is too high");
            return 0;
        }



// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_random_nu() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 8;
int r = 5;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =    5.000000e+00;
a <<  9.679033101508892e-01 ,  8.755342442351592e-01 ,  3.063866203332459e-01 ,  8.585144063565593e-01 ,  3.103636273531341e-01 ,  9.392884321352825e-01 ,  7.438421186671211e-01 ,  4.161722627650255e-01 ,  2.523581022798354e-01 ,  8.480262463668842e-03 ,  8.787178982088466e-01 ,  3.791653059858058e-02 ,  8.194141106127972e-01 ,  9.622011251808180e-01 ,  5.702805702451802e-01 ,  1.715170951777186e-01 ,  8.677810644349934e-01 ,  9.737752361596916e-01 ,  7.040231423300713e-01 ,  5.088737460778905e-01 ,  3.779688343436081e-01 ,  3.469308845626217e-01 ,  2.057617572947047e-01 ,  6.741530142468641e-01 ,  4.329501211003163e-01 ,  1.941186449851896e-01 ,  1.044242228415153e-01 ,  6.659575282786826e-01 ,  2.960726730831515e-01 ,  4.997999222368016e-01 ,  3.253456548759963e-01 ,  8.716215074235552e-01 ,  8.996782696347811e-01 ,  1.809298364047174e-02 ,  2.008530114407594e-01 ,  3.277407050962675e-01 ,  9.870497179280261e-01 ,  7.827003757293756e-01 ,  3.390956478509337e-01 ,  2.130297963808138e-01 ;
a.adjointInPlace();
g <<  1.169804525850760e+00 ,  8.238758045551933e-01 ,  9.242811342449778e-01 ,  1.312449300935304e+00 ,  1.179483281475151e+00 ,  9.369277640234152e-01 ,  6.246941229574543e-01 ,  1.614113497419727e+00 ,  8.238758045551933e-01 ,  1.658332427202137e+00 ,  1.573840697615404e+00 ,  1.831520385294441e+00 ,  1.319945625032377e+00 ,  1.864879792861315e+00 ,  8.998870493429817e-01 ,  1.789298515533700e+00 ,  9.242811342449778e-01 ,  1.573840697615404e+00 ,  2.040290273119122e+00 ,  2.208404566025134e+00 ,  1.354573609374076e+00 ,  1.923440053494007e+00 ,  1.005834744910355e+00 ,  1.856290266832668e+00 ,  1.312449300935304e+00 ,  1.831520385294441e+00 ,  2.208404566025134e+00 ,  2.749865152561448e+00 ,  1.602836647771932e+00 ,  2.067109562229453e+00 ,  1.228279670752370e+00 ,  2.452628232940455e+00 ,  1.179483281475151e+00 ,  1.319945625032377e+00 ,  1.354573609374076e+00 ,  1.602836647771932e+00 ,  1.939115690852534e+00 ,  1.663252631399956e+00 ,  6.667162446761848e-01 ,  1.963725737365350e+00 ,  9.369277640234152e-01 ,  1.864879792861315e+00 ,  1.923440053494007e+00 ,  2.067109562229453e+00 ,  1.663252631399956e+00 ,  2.398788355497424e+00 ,  1.281273489740228e+00 ,  1.946883849908424e+00 ,  6.246941229574543e-01 ,  8.998870493429817e-01 ,  1.005834744910355e+00 ,  1.228279670752370e+00 ,  6.667162446761848e-01 ,  1.281273489740228e+00 ,  1.257543632322567e+00 ,  1.246135424939549e+00 ,  1.614113497419727e+00 ,  1.789298515533700e+00 ,  1.856290266832668e+00 ,  2.452628232940455e+00 ,  1.963725737365350e+00 ,  1.946883849908424e+00 ,  1.246135424939549e+00 ,  3.040822394321562e+00 ;
nu <<  1.381464632475150e+00 ,  1.691632033292532e+00 ,  1.871156196597892e+00 ,  7.533146481025575e-01 ,  1.776547084686281e+00 ,  1.405509346091949e+00 ,  1.020547572963739e+00 ,  1.972465636669016e+00 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (80 x 48) and q
     pcost       dcost       gap    pres   dres
 0: -6.8544e+01 -4.8874e+00  3e+02  2e+01  1e+00
 1: -3.6017e+01 -5.7340e+01  2e+01  3e-15  3e-16
 2: -5.0594e+01 -5.4691e+01  4e+00  3e-15  2e-16
 3: -5.3233e+01 -5.3891e+01  7e-01  2e-15  2e-16
 4: -5.3642e+01 -5.3758e+01  1e-01  2e-15  5e-16
 5: -5.3719e+01 -5.3737e+01  2e-02  3e-15  5e-16
 6: -5.3733e+01 -5.3734e+01  3e-04  2e-15  1e-15
 7: -5.3734e+01 -5.3734e+01  3e-06  3e-15  1e-15
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  3.986560412315849e-07 ,  3.252957606546971e-07 ,  7.376764638362032e-07 ,  8.990334882501625e-01 ,  8.065996465368835e-02 ,  1.524030402490884e+00 ,  1.593570550544035e-07 ,  1.251920548027096e+00 ,  1.317461972046014e-07 ,  6.092039729070160e-08 ,  4.861233877449762e-07 ,  7.341913807699262e-01 ,  6.587057061041236e-02 ,  1.244593349488577e+00 ,  3.904805280401659e-08 ,  8.248186098932832e-01 ,  2.977474509444956e-07 ,  2.435195149081342e-07 ,  5.469638712810531e-07 ,  6.637516277680137e-01 ,  5.955082578345186e-02 ,  1.125183512562278e+00 ,  1.140588420369076e-07 ,  9.242862625357098e-01 ,  5.801314876142786e-07 ,  -3.557572368915982e-07 ,  -7.179122278104749e-07 ,  7.746999827213495e-01 ,  1.479174750490517e-01 ,  7.931250484992067e-01 ,  1.331695922026370e-07 ,  1.232903874421692e+00 ,  2.618923792790325e-07 ,  -1.349158332743187e-07 ,  -2.228485065430178e-07 ,  6.399562449153768e-01 ,  6.272212709737099e-02 ,  1.185104042042085e+00 ,  -4.133856716360247e-08 ,  9.735084121255640e-01 ,  5.985069712169500e-07 ,  4.919378443688752e-07 ,  1.056450432734200e-06 ,  1.241982999046713e+00 ,  1.114289309676003e-01 ,  2.105394133716707e+00 ,  2.684070771854858e-07 ,  1.729483994265213e+00 ;

            double error_x = (result.x - s_x).norm() / (double)s_x.rows();

            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % (EPSILON * s_x.norm()));
            KQP_LOG_ASSERT(logger, error_x < EPSILON * s_x.norm(), "Error for x is too high");
            return 0;
        }

