

// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_simple() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =                                                  1;
a <<  1 ,  0 ,  0 ,  0.40000000000000002220446049250313080847263336181641 ;
a.adjointInPlace();
g <<  1 ,  0 ,  0 ,  1 ;
nu <<  1 ,  1 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (8 x 6) and q
     pcost       dcost       gap    pres   dres
 0: -4.4722e-01  1.1439e+00  1e+01  4e+00  5e+00
 1:  6.3654e-01 -4.6929e-01  1e+00  1e-01  1e-01
 2: -7.8202e-02 -1.9056e-01  1e-01  8e-03  1e-02
 3: -1.1546e-01 -1.2906e-01  1e-02  2e-16  1e-15
 4: -1.2415e-01 -1.2509e-01  9e-04  1e-16  7e-16
 5: -1.2499e-01 -1.2500e-01  1e-05  2e-16  8e-15
 6: -1.2500e-01 -1.2500e-01  1e-07  5e-20  4e-14
 7: -1.2500e-01 -1.2500e-01  1e-09  5e-16  4e-14
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  0.50000000011840206592950153208221308887004852294922 ,  0 ,  0 ,  1.3313555506418430101115389641019959299228503368795e-08 ,  0.50000000015781720374974383958033286035060882568359 ,  1.3345542564978359674921631894406459650781471282244e-08 ;

            double error_x = (result.x - s_x).norm() / s_x.rows();
            // const double threshold = std::max(EPSILON * s_x.norm() / s_x.rows(), EPSILON);
            const double threshold = 1e-10;
            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % threshold);
            KQP_LOG_ASSERT(logger, error_x < threshold, "Error for x is too high");
            return 0;
        }



// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_random() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 8;
int r = 5;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =                                                  1;
a <<  0.37470302050164028262457804885343648493289947509766 ,  0.438961630044563122510226094163954257965087890625 ,  0.50842648824998182277568048448301851749420166015625 ,  0.77844261500014577670469861914170905947685241699219 ,  0.52093841761314518823411390258115716278553009033203 ,  0.39325509496422605959509155582054518163204193115234 ,  0.48969352046225822494562862630118615925312042236328 ,  0.029574963966907064083500245033064857125282287597656 ,  0.043487290356527430468247530370717868208885192871094 ,  0.70338208860383599763110851199598982930183410644531 ,  0.9831877173096739142010846990160644054412841796875 ,  0.59318373038005756114898758823983371257781982421875 ,  0.39359968637791398204939241622923873364925384521484 ,  0.17034919685568128411290445001213811337947845458984 ,  0.50223855843348308436446814084774814546108245849609 ,  0.98207663753853424726258936061640270054340362548828 ,  0.77052313983080056303265337191987782716751098632812 ,  0.53961744844977876933711513629532419145107269287109 ,  0.86028977892054958598322400575852952897548675537109 ,  0.23217612806301457517577091493876650929450988769531 ,  0.51377166318763700658678317267913371324539184570312 ,  0.9524673882682694880941198789514601230621337890625 ,  0.57779480780120306970815136082819662988185882568359 ,  0.45913173191066836142937290787813253700733184814453 ,  0.26927947744142122221688850913778878748416900634766 ,  0.54799630946624888760965177425532601773738861083984 ,  0.95711628146022686980387561561656184494495391845703 ,  0.0057091294503929246317852630454581230878829956054688 ,  0.78365523261538982957574717147508636116981506347656 ,  0.82048591192548192552180807979311794042587280273438 ,  0.88617958082600822855567912483820691704750061035156 ,  0.74050341183319634552617571898736059665679931640625 ,  0.80913990087247955607097082975087687373161315917969 ,  0.51867828352300204830527263766271062195301055908203 ,  0.56135786477837901209397841739701107144355773925781 ,  0.42609067968815017568573466633097268640995025634766 ,  0.056123297520740411670203684479929506778717041015625 ,  0.87001015517663982112850362682365812361240386962891 ,  0.56999933387638024306909301230916753411293029785156 ,  0.19983942017714306782494304570718668401241302490234 ;
a.adjointInPlace();
g <<  1.8492696772529573223664556280709803104400634765625 ,  1.9430430253373740523414880954078398644924163818359 ,  0.85629632259137078431621148411068134009838104248047 ,  0.96684097378017919144355118987732566893100738525391 ,  1.8765963625268273773372129653580486774444580078125 ,  1.8407927063468043638039262077654711902141571044922 ,  1.9083388898014144174908324202988296747207641601562 ,  1.2827227165655981089287251961650326848030090332031 ,  1.9430430253373740523414880954078398644924163818359 ,  3.2496422344058268905087061284575611352920532226562 ,  2.169346792031195292338452418334782123565673828125 ,  1.1413234265567602232493982228334061801433563232422 ,  2.2892681131514565073814537754515185952186584472656 ,  2.6698069698054962550770596863003447651863098144531 ,  3.1607866639617610005075221124570816755294799804688 ,  2.1536071831404934862064237677259370684623718261719 ,  0.85629632259137078431621148411068134009838104248047 ,  2.169346792031195292338452418334782123565673828125 ,  2.9217435601817522972112328716320917010307312011719 ,  1.1455956381265761656607082841219380497932434082031 ,  1.7867501320293344146961089791147969663143157958984 ,  1.7890631701727299773807544625014998018741607666016 ,  2.7364792996755999965330374834593385457992553710938 ,  2.37720069035475489727105014026165008544921875 ,  0.96684097378017919144355118987732566893100738525391 ,  1.1413234265567602232493982228334061801433563232422 ,  1.1455956381265761656607082841219380497932434082031 ,  0.93048543743856371168732266596634872257709503173828 ,  1.4023549071463228266054557025199756026268005371094 ,  1.2151942375276398866645877205883152782917022705078 ,  1.3528781264308487042313799975090660154819488525391 ,  1.3462431434959905018899917195085436105728149414062 ,  1.8765963625268273773372129653580486774444580078125 ,  2.2892681131514565073814537754515185952186584472656 ,  1.7867501320293344146961089791147969663143157958984 ,  1.4023549071463228266054557025199756026268005371094 ,  3.0496972497597947260317141626728698611259460449219 ,  2.2760711409281166872631274600280448794364929199219 ,  2.5694265671471421264016044005984440445899963378906 ,  2.1482982595870963038464651617687195539474487304688 ,  1.8407927063468043638039262077654711902141571044922 ,  2.6698069698054962550770596863003447651863098144531 ,  1.7890631701727299773807544625014998018741607666016 ,  1.2151942375276398866645877205883152782917022705078 ,  2.2760711409281166872631274600280448794364929199219 ,  2.5736691951228882757618521281983703374862670898438 ,  2.7546504993504123959269236365798860788345336914062 ,  1.9491154351917938658544926511240191757678985595703 ,  1.9083388898014144174908324202988296747207641601562 ,  3.1607866639617610005075221124570816755294799804688 ,  2.7364792996755999965330374834593385457992553710938 ,  1.3528781264308487042313799975090660154819488525391 ,  2.5694265671471421264016044005984440445899963378906 ,  2.7546504993504123959269236365798860788345336914062 ,  3.5983137393546034132896238588728010654449462890625 ,  2.5335993418914593000579316139919683337211608886719 ,  1.2827227165655981089287251961650326848030090332031 ,  2.1536071831404934862064237677259370684623718261719 ,  2.37720069035475489727105014026165008544921875 ,  1.3462431434959905018899917195085436105728149414062 ,  2.1482982595870963038464651617687195539474487304688 ,  1.9491154351917938658544926511240191757678985595703 ,  2.5335993418914593000579316139919683337211608886719 ,  2.3559108283036200859328346268739551305770874023438 ;
nu <<  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (80 x 48) and q
     pcost       dcost       gap    pres   dres
 0: -1.0149e+02 -7.4445e+01  2e+02  2e+01  8e-01
 1: -9.5865e+01 -1.0512e+02  9e+00  3e-01  2e-02
 2: -9.9646e+01 -1.0088e+02  1e+00  2e-02  1e-03
 3: -1.0003e+02 -1.0023e+02  2e-01  2e-03  1e-04
 4: -1.0011e+02 -1.0014e+02  3e-02  2e-04  1e-05
 5: -1.0012e+02 -1.0012e+02  1e-03  4e-06  2e-07
 6: -1.0012e+02 -1.0012e+02  6e-05  1e-07  6e-09
 7: -1.0012e+02 -1.0012e+02  2e-06  2e-09  1e-10
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  0.47528845215266857238134434737730771303176879882812 ,  0.19958488380871580725184344373701605945825576782227 ,  0.37841788797765030238906547310762107372283935546875 ,  1.341498066458657502245457870948541767575079575181e-07 ,  0.50684499625462664518238398159155622124671936035156 ,  0.65149504911736177970027483752346597611904144287109 ,  0.41201003779431827345192118627892341464757919311523 ,  0.65238540110487275303086107669514603912830352783203 ,  0.027125969082319095759814331358938943594694137573242 ,  0.47921989019204369597559889371041208505630493164062 ,  0.83864869847078293840780816026381216943264007568359 ,  5.0103051225839723235161438097406971792224794626236e-07 ,  0.52538121462644438164346638586721383035182952880859 ,  0.35043041063689628344945958815515041351318359375 ,  0.80038011880470649739294231039821170270442962646484 ,  0.99404128113792666887604809744516387581825256347656 ,  0.47528879067929480362053595854376908391714096069336 ,  0.48659032142035935075696784224419388920068740844727 ,  0.47191776315149414067207089829025790095329284667969 ,  4.5246379417158099061485598824106091342400759458542e-07 ,  0.52538163347114308354690592750557698309421539306641 ,  0.83102101162845820603308766294503584504127502441406 ,  0.83121885861729583044876790154376067221164703369141 ,  0.99404098235351434631468237057561054825782775878906 ,  0.47528876320735596872069095297774765640497207641602 ,  0.48659033660097839035785227679298259317874908447266 ,  0.83864875704202657136221432665479369461536407470703 ,  4.9597669949185367718400008207879636756842955946922e-07 ,  0.52538165837867967233876242971746250987052917480469 ,  0.83102102595178584110158226394560188055038452148438 ,  0.83121888695415413472744603495812043547630310058594 ,  0.99404130604048046571108443458797410130500793457031 ,  0.47528871306724795875453537519206292927265167236328 ,  0.48658963740400046349421359082043636590242385864258 ,  0.059471958268474754694121742204515612684190273284912 ,  3.8975529236284867725011171746274385441211052238941e-07 ,  0.13081691633345549075073677158798091113567352294922 ,  0.83102064653556906304032736443332396447658538818359 ,  0.83121745392560419940508609215612523257732391357422 ,  0.84407359446560970006601110071642324328422546386719 ,  0.47528883488761430875513269711518660187721252441406 ,  0.48659035828627000830337578918260987848043441772461 ,  0.83864877616275335103779298151494003832340240478516 ,  5.6032983967632180835778676897263039791141636669636e-07 ,  0.525381677425883708565379492938518524169921875 ,  0.83102105247472490834326208641869015991687774658203 ,  0.83121890460157443758504314246238209307193756103516 ,  0.99404133247518555727140210365178063511848449707031 ;

            double error_x = (result.x - s_x).norm() / s_x.rows();
            // const double threshold = std::max(EPSILON * s_x.norm() / s_x.rows(), EPSILON);
            const double threshold = 1e-10;
            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % threshold);
            KQP_LOG_ASSERT(logger, error_x < threshold, "Error for x is too high");
            return 0;
        }



// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_simple_nu() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =                                                  1;
a <<  1 ,  0 ,  0 ,  0.40000000000000002220446049250313080847263336181641 ;
a.adjointInPlace();
g <<  1 ,  0 ,  0 ,  1 ;
nu <<  6.0377637394309067175868221966084092855453491210938 ,  5.8794008978218732508480570686515420675277709960938 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (8 x 6) and q
     pcost       dcost       gap    pres   dres
 0: -1.4070e-01 -1.0780e-04  1e+00  3e+00  0e+00
 1: -1.4835e-03 -8.0130e-08  1e-02  4e-02  5e-17
 2: -1.4836e-05 -8.0178e-12  1e-04  4e-04  4e-17
 3: -1.4836e-07 -8.0178e-16  1e-06  4e-06  2e-16
 4: -1.4836e-09 -8.0179e-20  1e-08  4e-08  9e-17
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  3.7643334291523894164768412884392034811753546819091e-10 ,  0 ,  0 ,  1.3658301000995504197987184943560712291343861579662e-10 ,  -8.2103093489610584127707040846821939794608624652028e-10 ,  -1.2840287636595959414222015496087614394582487875596e-09 ;

            double error_x = (result.x - s_x).norm() / s_x.rows();
            // const double threshold = std::max(EPSILON * s_x.norm() / s_x.rows(), EPSILON);
            const double threshold = 1e-10;
            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % threshold);
            KQP_LOG_ASSERT(logger, error_x < threshold, "Error for x is too high");
            return 0;
        }



// ------- Generated from qp_test.py ---
template<typename Scalar> int qp_test_random_nu() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 8;
int r = 5;
Matrix g(n,n);
Matrix a(r, n);
Vector nu(n, 1);
Scalar lambda =                                                  5;
a <<  0.96790331015088915123101287463214248418807983398438 ,  0.87553424423515924246430586208589375019073486328125 ,  0.306386620333245929259646800346672534942626953125 ,  0.85851440635655928979019790858728811144828796386719 ,  0.31036362735313405281090126663912087678909301757812 ,  0.93928843213528245836840824267710559070110321044922 ,  0.74384211866712113270239115081494674086570739746094 ,  0.41617226276502550241787048435071483254432678222656 ,  0.25235810227983535014573135413229465484619140625 ,  0.0084802624636688417325558475567959249019622802734375 ,  0.87871789820884660393573994952021166682243347167969 ,  0.037916530598580577837708460720023140311241149902344 ,  0.81941411061279723071493208408355712890625 ,  0.96220112518081801766811622655950486660003662109375 ,  0.57028057024518019613168462456087581813335418701172 ,  0.17151709517771862589796683096210472285747528076172 ,  0.86778106443499336553060174992424435913562774658203 ,  0.97377523615969163728323110262863337993621826171875 ,  0.70402314233007134980368846299825236201286315917969 ,  0.5088737460778904875269290641881525516510009765625 ,  0.37796883434360806219842743303161114454269409179688 ,  0.34693088456262166641153044110978953540325164794922 ,  0.20576175729470469466519944035098887979984283447266 ,  0.67415301424686413511722093971911817789077758789062 ,  0.43295012110031627639017415276612155139446258544922 ,  0.19411864498518960342465788926347158849239349365234 ,  0.10442422284151531286511271900963038206100463867188 ,  0.66595752827868259782206905583734624087810516357422 ,  0.29607267308315154963338500238023698329925537109375 ,  0.49979992223680158591747613172628916800022125244141 ,  0.32534565487599631516957288113189861178398132324219 ,  0.87162150742355515298243062716210260987281799316406 ,  0.89967826963478114699057641701074317097663879394531 ,  0.018092983640471738127075695956591516733169555664062 ,  0.20085301144075939916433526377659291028976440429688 ,  0.32774070509626751501741637184750288724899291992188 ,  0.98704971792802609353856269081006757915019989013672 ,  0.78270037572937556369367939623771235346794128417969 ,  0.33909564785093371241941895277705043554306030273438 ,  0.21302979638081376290159596464945934712886810302734 ;
a.adjointInPlace();
g <<  1.1698045258507601129593922451022081077098846435547 ,  0.82387580455519326960711623542010784149169921875 ,  0.92428113424497782002475787521689198911190032958984 ,  1.3124493009353035422037692114827223122119903564453 ,  1.1794832814751510241535470413509756326675415039062 ,  0.93692776402341515495919566092197783291339874267578 ,  0.62469412295745430085958105337340384721755981445312 ,  1.6141134974197273166396371379960328340530395507812 ,  0.82387580455519326960711623542010784149169921875 ,  1.6583324272021369161222992261173203587532043457031 ,  1.5738406976154037941739716188749298453330993652344 ,  1.8315203852944406115454967221012338995933532714844 ,  1.3199456250323771122623384144390001893043518066406 ,  1.8648797928613145558074393193237483501434326171875 ,  0.89988704934298169302309133854578249156475067138672 ,  1.7892985155336997848962710122577846050262451171875 ,  0.92428113424497782002475787521689198911190032958984 ,  1.5738406976154037941739716188749298453330993652344 ,  2.0402902731191217000628057576250284910202026367188 ,  2.208404566025134130313745117746293544769287109375 ,  1.3545736093740761152304230563458986580371856689453 ,  1.9234400534940072624578988325083628296852111816406 ,  1.0058347449103548498783311515580862760543823242188 ,  1.8562902668326679567201153986388817429542541503906 ,  1.3124493009353035422037692114827223122119903564453 ,  1.8315203852944406115454967221012338995933532714844 ,  2.208404566025134130313745117746293544769287109375 ,  2.7498651525614481450077164481626823544502258300781 ,  1.6028366477719320215555853792466223239898681640625 ,  2.0671095622294530791407396463910117745399475097656 ,  1.2282796707523695456387713420554064214229583740234 ,  2.4526282329404551774132414720952510833740234375 ,  1.1794832814751510241535470413509756326675415039062 ,  1.3199456250323771122623384144390001893043518066406 ,  1.3545736093740761152304230563458986580371856689453 ,  1.6028366477719320215555853792466223239898681640625 ,  1.9391156908525339908067053329432383179664611816406 ,  1.663252631399956271707196719944477081298828125 ,  0.66671624467618484377595677869976498186588287353516 ,  1.9637257373653498326859789813170209527015686035156 ,  0.93692776402341515495919566092197783291339874267578 ,  1.8648797928613145558074393193237483501434326171875 ,  1.9234400534940072624578988325083628296852111816406 ,  2.0671095622294530791407396463910117745399475097656 ,  1.663252631399956271707196719944477081298828125 ,  2.3987883554974240851720423961523920297622680664062 ,  1.2812734897402282552292263062554411590099334716797 ,  1.9468838499084237803060659643961116671562194824219 ,  0.62469412295745430085958105337340384721755981445312 ,  0.89988704934298169302309133854578249156475067138672 ,  1.0058347449103548498783311515580862760543823242188 ,  1.2282796707523695456387713420554064214229583740234 ,  0.66671624467618484377595677869976498186588287353516 ,  1.2812734897402282552292263062554411590099334716797 ,  1.2575436323225666068736927627469412982463836669922 ,  1.2461354249395486526452714315382763743400573730469 ,  1.6141134974197273166396371379960328340530395507812 ,  1.7892985155336997848962710122577846050262451171875 ,  1.8562902668326679567201153986388817429542541503906 ,  2.4526282329404551774132414720952510833740234375 ,  1.9637257373653498326859789813170209527015686035156 ,  1.9468838499084237803060659643961116671562194824219 ,  1.2461354249395486526452714315382763743400573730469 ,  3.0408223943215619833324581122724339365959167480469 ;
nu <<  1.3814646324751502781680301268352195620536804199219 ,  1.6916320332925323111084026095340959727764129638672 ,  1.8711561965978917854158680711407214403152465820312 ,  0.75331464810255754915857551168301142752170562744141 ,  1.7765470846862807530186501026037149131298065185547 ,  1.4055093460919489967153594989213161170482635498047 ,  1.0205475729637387694026529061375185847282409667969 ,  1.9724656366690158648680153419263660907745361328125 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, nu, result);

/*
Constructing P...
Constructing q...
Constructing G (80 x 48) and q
     pcost       dcost       gap    pres   dres
 0: -6.8544e+01 -4.8874e+00  3e+02  2e+01  1e+00
 1: -3.6017e+01 -5.7340e+01  2e+01  3e-15  3e-16
 2: -5.0594e+01 -5.4691e+01  4e+00  3e-15  2e-16
 3: -5.3233e+01 -5.3891e+01  7e-01  2e-15  2e-16
 4: -5.3642e+01 -5.3758e+01  1e-01  2e-15  5e-16
 5: -5.3719e+01 -5.3737e+01  2e-02  3e-15  5e-16
 6: -5.3733e+01 -5.3734e+01  3e-04  2e-15  1e-15
 7: -5.3734e+01 -5.3734e+01  3e-06  3e-15  1e-15
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  3.9865604123158493183459727404738259792793542146683e-07 ,  3.2529576065469712918207245699875329592032358050346e-07 ,  7.3767646383620321358376425990854841074906289577484e-07 ,  0.89903348825016249357133801822783425450325012207031 ,  0.080659964653688354108140856624231673777103424072266 ,  1.5240304024908837288165841528098098933696746826172 ,  1.593570550544035264485531744327317937859334051609e-07 ,  1.2519205480270956254429393084137700498104095458984 ,  1.3174619720460135820910840820374687609728425741196e-07 ,  6.0920397290701604653580247816790915749152190983295e-08 ,  4.8612338774497618979625324087123772187624126672745e-07 ,  0.73419138076992618291427561416639946401119232177734 ,  0.065870570610412362833052668520394945517182350158691 ,  1.2445933494885768055837615975178778171539306640625 ,  3.9048052804016587498479179396682070546376053243876e-08 ,  0.82481860989328315003632496882346458733081817626953 ,  2.97747450944495619176710654585349402623251080513e-07 ,  2.4351951490813423476661236932727661042008548974991e-07 ,  5.4696387128105308436665232818540971493348479270935e-07 ,  0.66375162776801366337764420677558518946170806884766 ,  0.059550825783451860617745410308998543769121170043945 ,  1.1251835125622779987253352373954840004444122314453 ,  1.140588420369076459032209314159445057157427072525e-07 ,  0.92428626253570977944207243126584216952323913574219 ,  5.801314876142786049195709807690946036018431186676e-07 ,  -3.5575723689159824544500643206390577688580378890038e-07 ,  -7.1791222781047493196882047783446978428401052951813e-07 ,  0.77469998272134954486745073154452256858348846435547 ,  0.14791747504905172760913956153672188520431518554688 ,  0.79312504849920673066776544146705418825149536132812 ,  1.3316959220263703826854506662158428298425860702991e-07 ,  1.2329038744216924694541148710413835942745208740234 ,  2.6189237927903253016874429714988536943565122783184e-07 ,  -1.3491583327431873199145351271965864725643768906593e-07 ,  -2.2284850654301778158893065917567355427308939397335e-07 ,  0.63995624491537683731223751237848773598670959472656 ,  0.062722127097370988790814294588926713913679122924805 ,  1.1851040420420848597871099627809599041938781738281 ,  -4.1338567163602469624068130871208381904580164700747e-08 ,  0.97350841212556404880018590120016597211360931396484 ,  5.9850697121694996756871565146695957082556560635567e-07 ,  4.9193784436887518299319488335186179028823971748352e-07 ,  1.0564504327342002631268114143381353642325848340988e-06 ,  1.2419829990467134983589403418591246008872985839844 ,  0.11142893096760028703862133170332526788115501403809 ,  2.10539413371670747210373519919812679290771484375 ,  2.6840707718548580660612723480795693831169046461582e-07 ,  1.7294839942652131536959814184228889644145965576172 ;

            double error_x = (result.x - s_x).norm() / s_x.rows();
            // const double threshold = std::max(EPSILON * s_x.norm() / s_x.rows(), EPSILON);
            const double threshold = 1e-10;
            KQP_LOG_INFO_F(logger, "Average error (x) = %g [threshold %g]", %error_x % threshold);
            KQP_LOG_ASSERT(logger, error_x < threshold, "Error for x is too high");
            return 0;
        }

