

// ------- Generated from kkt_test.py ---
template<typename Scalar> int qp_test_simple() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
Matrix a(r, n);
Scalar lambda =    1.000000e+00;
a <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  4.000000000000000e-01 ;
a.adjointInPlace();
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, result);

/*
Constructing P...
Constructing q...
Constructing G (8 x 6) and q
     pcost       dcost       gap    pres   dres
 0: -1.7889e+00  2.5756e+00  2e+01  5e+00  3e+00
 1:  8.2758e-01 -1.1275e+00  2e+00  1e-01  9e-02
 2: -3.6689e-01 -6.1129e-01  3e-01  2e-02  1e-02
 3: -4.7954e-01 -5.0556e-01  3e-02  1e-16  1e-16
 4: -4.9862e-01 -5.0008e-01  1e-03  4e-16  2e-16
 5: -4.9998e-01 -5.0000e-01  2e-05  3e-16  6e-17
 6: -5.0000e-01 -5.0000e-01  2e-07  4e-16  3e-16
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  1.000000005975883e+00 ,  2.732153757115897e-21 ,  6.911898300492792e-23 ,  7.609353718964737e-07 ,  1.000000007990815e+00 ,  7.625244462002164e-07 ;

            double error_x = (result.x - s_x).norm() / (double)s_x.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template<typename Scalar> int qp_test_random() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 8;
int r = 5;
Matrix g(n,n);
Matrix a(r, n);
Scalar lambda =    1.000000e+00;
a <<  3.747030205016403e-01 ,  4.389616300445631e-01 ,  5.084264882499818e-01 ,  7.784426150001458e-01 ,  5.209384176131452e-01 ,  3.932550949642261e-01 ,  4.896935204622582e-01 ,  2.957496396690706e-02 ,  4.348729035652743e-02 ,  7.033820886038360e-01 ,  9.831877173096739e-01 ,  5.931837303800576e-01 ,  3.935996863779140e-01 ,  1.703491968556813e-01 ,  5.022385584334831e-01 ,  9.820766375385342e-01 ,  7.705231398308006e-01 ,  5.396174484497788e-01 ,  8.602897789205496e-01 ,  2.321761280630146e-01 ,  5.137716631876370e-01 ,  9.524673882682695e-01 ,  5.777948078012031e-01 ,  4.591317319106684e-01 ,  2.692794774414212e-01 ,  5.479963094662489e-01 ,  9.571162814602269e-01 ,  5.709129450392925e-03 ,  7.836552326153898e-01 ,  8.204859119254819e-01 ,  8.861795808260082e-01 ,  7.405034118331963e-01 ,  8.091399008724796e-01 ,  5.186782835230020e-01 ,  5.613578647783790e-01 ,  4.260906796881502e-01 ,  5.612329752074041e-02 ,  8.700101551766398e-01 ,  5.699993338763802e-01 ,  1.998394201771431e-01 ;
a.adjointInPlace();
g <<  1.849269677252957e+00 ,  1.943043025337374e+00 ,  8.562963225913708e-01 ,  9.668409737801792e-01 ,  1.876596362526827e+00 ,  1.840792706346804e+00 ,  1.908338889801414e+00 ,  1.282722716565598e+00 ,  1.943043025337374e+00 ,  3.249642234405827e+00 ,  2.169346792031195e+00 ,  1.141323426556760e+00 ,  2.289268113151457e+00 ,  2.669806969805496e+00 ,  3.160786663961761e+00 ,  2.153607183140493e+00 ,  8.562963225913708e-01 ,  2.169346792031195e+00 ,  2.921743560181752e+00 ,  1.145595638126576e+00 ,  1.786750132029334e+00 ,  1.789063170172730e+00 ,  2.736479299675600e+00 ,  2.377200690354755e+00 ,  9.668409737801792e-01 ,  1.141323426556760e+00 ,  1.145595638126576e+00 ,  9.304854374385637e-01 ,  1.402354907146323e+00 ,  1.215194237527640e+00 ,  1.352878126430849e+00 ,  1.346243143495991e+00 ,  1.876596362526827e+00 ,  2.289268113151457e+00 ,  1.786750132029334e+00 ,  1.402354907146323e+00 ,  3.049697249759795e+00 ,  2.276071140928117e+00 ,  2.569426567147142e+00 ,  2.148298259587096e+00 ,  1.840792706346804e+00 ,  2.669806969805496e+00 ,  1.789063170172730e+00 ,  1.215194237527640e+00 ,  2.276071140928117e+00 ,  2.573669195122888e+00 ,  2.754650499350412e+00 ,  1.949115435191794e+00 ,  1.908338889801414e+00 ,  3.160786663961761e+00 ,  2.736479299675600e+00 ,  1.352878126430849e+00 ,  2.569426567147142e+00 ,  2.754650499350412e+00 ,  3.598313739354603e+00 ,  2.533599341891459e+00 ,  1.282722716565598e+00 ,  2.153607183140493e+00 ,  2.377200690354755e+00 ,  1.346243143495991e+00 ,  2.148298259587096e+00 ,  1.949115435191794e+00 ,  2.533599341891459e+00 ,  2.355910828303620e+00 ;

// Solve
kqp::cvxopt::ConeQPReturn<Scalar> result;
solve_qp(r, lambda, g, a, result);

/*
Constructing P...
Constructing q...
Constructing G (80 x 48) and q
     pcost       dcost       gap    pres   dres
 0: -4.0596e+02 -3.0578e+02  4e+02  2e+01  6e-01
 1: -3.9093e+02 -4.1132e+02  2e+01  5e-01  1e-02
 2: -3.9923e+02 -4.0230e+02  3e+00  6e-02  2e-03
 3: -4.0029e+02 -4.0073e+02  4e-01  6e-03  2e-04
 4: -4.0044e+02 -4.0053e+02  9e-02  5e-04  1e-05
 5: -4.0048e+02 -4.0048e+02  3e-03  1e-05  3e-07
 6: -4.0048e+02 -4.0048e+02  2e-04  5e-07  1e-08
 7: -4.0048e+02 -4.0048e+02  6e-06  7e-09  2e-10
Optimal solution found.
*/

// Solution
Eigen::VectorXd s_x(n*(r+1));
s_x <<  9.505911295084341e-01 ,  3.991720265811884e-01 ,  7.568628370911580e-01 ,  1.168899579909510e-07 ,  1.013704342506822e+00 ,  1.302986162761489e+00 ,  8.240023862890239e-01 ,  1.304742972998808e+00 ,  5.419609983681131e-02 ,  9.588836750246409e-01 ,  1.677291172488668e+00 ,  6.072039523149461e-07 ,  1.050762887842412e+00 ,  7.006628894806519e-01 ,  1.600551178984127e+00 ,  1.988089510650102e+00 ,  9.505915596752051e-01 ,  9.730314719895113e-01 ,  9.438247194763840e-01 ,  5.301478298511300e-07 ,  1.050763451490262e+00 ,  1.662109402421961e+00 ,  1.662512847182068e+00 ,  1.988089189624345e+00 ,  9.505915067931845e-01 ,  9.730314869545639e-01 ,  1.677291230218084e+00 ,  5.948803260227733e-07 ,  1.050763480243910e+00 ,  1.662109413381161e+00 ,  1.662512873473223e+00 ,  1.988089533482226e+00 ,  9.505914781955056e-01 ,  9.730307543665052e-01 ,  1.189398520908334e-01 ,  4.670258983402020e-07 ,  2.616184855446652e-01 ,  1.662108990873039e+00 ,  1.662511385323549e+00 ,  1.688155356390787e+00 ,  9.505916026507659e-01 ,  9.730315099800302e-01 ,  1.677291252894016e+00 ,  6.596501766871423e-07 ,  1.050763499016744e+00 ,  1.662109443611716e+00 ,  1.662512892322330e+00 ,  1.988089564113124e+00 ;

            double error_x = (result.x - s_x).norm() / (double)s_x.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            return 0;
        }

