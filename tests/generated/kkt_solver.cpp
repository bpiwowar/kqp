

// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_simple() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;
z <<  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ;
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
w.d <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g, Vector::Ones(r));
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  3.333333333333334e-01 ,  3.333333333333334e-01 ,  3.333333333333334e-01 ,  3.333333333333334e-01 ,  2.500000000000002e-01 ,  2.500000000000002e-01 ;
s_z <<  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_diagonal_g() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  3.581271232822211e-01 ,  6.254013093739197e-02 ,  9.983351239262784e-01 ,  7.264191316329575e-01 ,  3.577462038246902e-01 ,  2.841263379389211e-01 ,  6.329531300956628e-01 ,  7.991308863953699e-01 ,  9.137409677267353e-01 ,  4.558578115404445e-01 ,  5.939961027117711e-01 ,  6.104817391520284e-01 ,  8.868787149321832e-01 ,  5.997269534432816e-01 ,  8.530553344128131e-01 ,  4.902863336475783e-01 ,  8.901624092204933e-01 ,  4.496661204893171e-01 ,  5.918662609572841e-01 ,  3.907213083454275e-01 ,  8.941506427620346e-01 ,  2.575416120164254e-01 ,  4.723751065714680e-01 ,  6.959617729120682e-02 ,  5.359130512799315e-01 ,  8.197265106991095e-01 ,  5.409910687761410e-02 ,  5.063722114157767e-01 ,  3.037811523499082e-01 ,  6.668295926321905e-01 ,  5.286990983800918e-01 ,  3.085751216900767e-01 ,  9.357664766645635e-01 ,  3.483121712491488e-01 ,  7.112732161619959e-01 ,  9.677576725330274e-01 ,  1.867199668805974e-02 ,  3.370923486709086e-01 ,  4.721067493038458e-01 ,  2.374517345691669e-01 ,  3.746236006307744e-01 ,  9.598665199207596e-01 ,  9.019048555844166e-01 ,  1.263079656011695e-01 ,  3.933217840303493e-01 ,  5.934721827909598e-01 ,  6.478219666153570e-01 ,  2.931079441289739e-01 ,  9.434156117641177e-01 ,  5.850463681334719e-01 ,  8.307146052931857e-01 ,  5.650069239990575e-01 ,  6.778872969865164e-01 ,  5.980332613835857e-01 ,  8.567554573806986e-01 ;
z <<  1.604572731366098e-01 ,  7.063017451867735e-01 ,  1.633432849826171e-01 ,  6.161937859313679e-01 ,  3.957115668279924e-01 ,  4.744465093950486e-01 ,  5.644307227514710e-01 ,  6.140936012407324e-01 ,  6.826083214771707e-01 ,  7.360658888719731e-01 ,  5.391377758873439e-01 ,  5.031077954894231e-01 ,  8.557294890595680e-01 ,  5.524397085832078e-01 ,  9.644012605487609e-01 ,  4.999277010957540e-01 ,  3.989534107182313e-01 ,  7.399095402000980e-01 ,  4.652978365580444e-01 ,  3.443138963800746e-01 ,  1.380776370393529e-01 ,  3.835323289341028e-01 ,  4.001252039946072e-01 ,  9.701902766840735e-01 ,  5.185345079353404e-01 ,  3.892882633375845e-01 ,  2.546013912506551e-02 ,  4.399201611058999e-01 ,  1.760701419630244e-01 ,  6.232922710349670e-01 ,  6.333019128349027e-01 ,  4.157734418050033e-01 ,  8.608318141351401e-01 ,  4.554854705438794e-01 ,  9.017252539716359e-01 ,  7.779361881486272e-01 ,  6.010418700327942e-01 ,  2.247317970506708e-01 ,  8.499090963045492e-01 ,  5.858078171012212e-01 ,  3.625428002752551e-01 ,  8.013822846552254e-02 ,  5.060157551033942e-01 ,  9.289069248956794e-01 ,  3.907621350005559e-01 ,  2.541155782252252e-01 ,  5.554868172154689e-01 ,  8.198570776362758e-01 ,  1.226230683859373e-01 ,  3.418146370581058e-01 ,  6.948061984282246e-01 ,  3.497357969358255e-01 ,  4.717209303008109e-01 ,  5.028148360122344e-01 ,  9.087996770887157e-01 ,  6.535264255756352e-01 ,  9.689877247637059e-01 ,  6.467095593047631e-01 ,  4.087794666560826e-01 ,  7.686250529885374e-01 ,  4.941051194900279e-01 ,  9.934118647360092e-01 ,  6.579717808706836e-01 ,  8.089019198131191e-01 ,  7.375564783338060e-01 ,  5.297782160871108e-01 ,  2.056999894254998e-01 ,  5.291442043910697e-01 ,  4.047838878051300e-01 ,  5.601069301896265e-01 ,  9.723575870310819e-01 ,  7.055629499559746e-01 ,  8.352638256373788e-01 ,  3.633963392627115e-02 ,  9.161546908685391e-01 ,  5.646505784373443e-01 ,  8.446149863604833e-01 ,  7.891420013795030e-01 ,  8.691536490255372e-01 ,  5.115086132887973e-01 ,  2.263129121413291e-01 ,  5.544583006249242e-01 ,  6.063760365128047e-01 ,  9.300208661845696e-01 ,  8.682406407281388e-01 ,  3.242472695486871e-01 ,  5.272604820269032e-01 ,  6.187649680409911e-01 ,  3.620116830598330e-02 ,  4.822035557176478e-01 ,  4.650868866365152e-01 ,  1.518047071327243e-01 ,  3.379913769008986e-01 ,  4.278831935073150e-01 ,  4.617650856333185e-01 ,  7.570238130565171e-01 ,  3.973503527428426e-01 ,  2.108422638089192e-01 ,  4.110369211176070e-01 ,  5.328542573932629e-01 ;
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
w.d <<  5.740529625356818e-01 ,  3.178470407436274e-02 ,  3.661797798241129e-01 ,  3.337330637443255e-01 ,  6.431588405557132e-01 ,  8.246719862995616e-01 ,  6.000301956736307e-01 ,  6.150687564939598e-01 ,  3.328480169498673e-01 ,  1.959556604264157e-01 ,  2.080211678131404e-01 ,  2.935312205591726e-01 ,  4.591878267301843e-01 ,  7.909325242410786e-01 ,  1.593771810997149e-01 ,  5.097254101839196e-01 ,  2.063638479598530e-01 ,  6.068498673075707e-01 ,  3.707062795456340e-01 ,  8.023246729501388e-01 ,  9.543936569223542e-01 ,  9.627449467416789e-01 ,  5.513644121099346e-01 ,  4.532637014863922e-01 ,  9.379660449212043e-01 ,  7.777519156605486e-01 ,  6.837859379589851e-01 ,  6.584624819848551e-01 ,  9.510142494586120e-01 ,  5.945695011283636e-01 ,  7.964679098383781e-01 ,  6.763188126892622e-01 ,  3.397978789527205e-01 ,  6.100589741760200e-01 ,  8.065042676341412e-01 ,  6.791933490807714e-01 ,  4.172041841857910e-01 ,  1.210750056929100e-01 ,  6.159118502194036e-01 ,  2.412611459637956e-01 ,  4.587604007574763e-01 ,  4.639487487728091e-01 ,  6.131487202391828e-01 ,  3.060384534886406e-01 ,  1.227655739115349e-01 ,  5.225496179193403e-01 ,  8.322878710760623e-01 ,  8.450277083024506e-01 ,  1.843905189031675e-01 ,  9.083499156635039e-01 ,  4.023150129274834e-01 ,  8.530309611500163e-01 ,  4.742763901379052e-01 ,  9.579048695068040e-01 ,  4.469107719974852e-02 ,  6.834653079370490e-02 ,  3.712188315414988e-01 ,  4.447214355610014e-01 ,  5.986775946456329e-01 ,  5.049935230098908e-01 ,  7.547627717449510e-01 ,  1.525837593164595e-01 ,  5.986396125594340e-02 ,  5.436367746669064e-01 ,  5.197601952537598e-01 ,  6.233781393337470e-01 ,  2.669148548657369e-01 ,  1.528733656428451e-01 ,  1.201208254604929e-01 ,  7.875593559217677e-01 ,  6.673950116004759e-01 ,  1.757653818270346e-01 ,  8.032473862408241e-01 ,  8.633727699244996e-01 ,  2.586241699016480e-01 ,  5.140191935583014e-01 ,  8.690724579342615e-01 ,  8.914392468876153e-01 ,  8.492783686931266e-01 ,  9.428456948414333e-01 ,  4.975471851710828e-01 ,  6.200110882434162e-01 ,  6.623452633147933e-01 ,  4.773589051379105e-01 ,  8.264274284762658e-01 ,  1.330911894521063e-01 ,  1.481987800119651e-01 ,  9.816896210181321e-01 ,  6.916522778373735e-02 ,  5.960184211693965e-01 ,  1.900201293296073e-01 ,  6.368629597783582e-02 ,  3.422413592425164e-01 ,  6.894750770353973e-01 ,  3.833030882711086e-02 ,  8.596880833990873e-01 ,  6.002903822151096e-01 ,  2.592187306074387e-01 ,  3.616555123981593e-01 ,  3.475714888627289e-01 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g, Vector::Ones(r));
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  2.687409523253937e-01 ,  -2.291110323938885e-01 ,  2.758497052301393e-01 ,  -5.678890356645605e-02 ,  4.252375884535491e-01 ,  2.009031372786156e-01 ,  3.590133133021025e-01 ,  1.262464287543832e-01 ,  -9.658782044076808e-02 ,  -1.628152518966869e-01 ,  -5.246556684243653e-02 ,  4.049101135354211e-01 ,  9.567100152898622e-02 ,  2.728688687944372e-01 ,  -3.902840670788132e-01 ,  6.808000681454129e-02 ,  -2.823448737874246e-02 ,  -2.789732074742640e-02 ,  -4.226872668554049e-02 ,  1.753725311665750e-01 ,  5.543806222143007e-01 ,  2.253962493757891e-01 ,  2.435586134460839e-01 ,  -4.136155963443460e-01 ,  4.089697545143003e-01 ,  2.098303199217471e-01 ,  3.375389318480402e-01 ,  2.344151608628396e-01 ,  3.393232350765129e-01 ,  6.055824558242950e-02 ,  -1.008898263924485e-01 ,  1.112775677334497e-01 ,  -1.318070345704170e-01 ,  3.000407337031372e-01 ,  1.578115286770864e-01 ,  -1.161056174836100e-01 ,  3.068745401372608e-02 ,  3.297354665085609e-01 ,  -4.192576894231830e-01 ,  -7.375166218006157e-02 ,  3.510624087277736e-02 ,  -3.065629877920838e-01 ,  -6.893655184329284e-02 ,  -3.589800849960870e-01 ,  -9.621008524872465e-03 ,  2.875460176175164e-01 ,  6.013150134857947e-02 ,  -3.035560484097236e-01 ,  2.757412154850623e-01 ,  1.122425126520258e-01 ,  -4.514743265724753e-01 ,  -4.767543244545516e-01 ,  -5.584577171729864e-01 ,  -4.600942872848884e-01 ,  -4.817896837866343e-01 ;
s_z <<  3.880495801654728e-02 ,  -1.372950766861389e-02 ,  3.256999253686714e-01 ,  -2.975749359856829e-01 ,  -5.273339183239097e-01 ,  -2.714719595432776e-01 ,  -7.444453876151028e-01 ,  -2.957105378899462e-01 ,  -3.783294697245593e-01 ,  -4.667431039737492e-01 ,  -1.692033692650428e-01 ,  -1.469225603153015e+00 ,  -8.557342998695356e-01 ,  -4.617515134343346e-01 ,  -5.793019367405418e-01 ,  -2.286199177234903e-01 ,  5.138274080627324e-01 ,  -2.530354055459636e-01 ,  9.998529687118952e-02 ,  -4.723367613845075e-02 ,  -2.524995120548920e-01 ,  -1.372889614250087e-01 ,  -1.545730888607147e-01 ,  -2.128570912218430e-01 ,  -4.751926587070109e-01 ,  -1.898346422733804e-01 ,  1.663609137985360e-01 ,  -1.759820915634468e-01 ,  -5.814748810139189e-02 ,  -3.398439248015489e-01 ,  -1.016208674200109e-01 ,  -7.436830698809867e-02 ,  -5.019662362738566e-01 ,  -4.842677994552174e-01 ,  -7.163596301317707e-01 ,  -3.097148174039696e-01 ,  -3.714607989716488e-01 ,  3.295852509704461e-02 ,  4.780372449894212e-02 ,  -1.254510792179828e-01 ,  1.173276624041002e-01 ,  1.515639573640605e+00 ,  1.979593366280476e-01 ,  -3.588848112473569e-01 ,  8.198434960559707e-01 ,  -1.725908242539131e-01 ,  -1.668461105049626e-01 ,  4.988793566440742e-02 ,  3.347786197527122e-01 ,  3.053067281483209e-02 ,  6.315717697123158e-02 ,  -1.196820625801506e-01 ,  7.645046214442298e-01 ,  -1.038823952790180e-01 ,  -3.965903172596333e-02 ,  -1.681082728269684e-02 ,  -3.588721144718082e-01 ,  8.543457450994596e-02 ,  -7.562167052328024e-02 ,  -8.904086896373594e-01 ,  -1.259950322405726e-01 ,  -7.323677647387932e-01 ,  -6.419658986948683e-02 ,  -1.396865835287212e-01 ,  -1.242978718888943e+00 ,  -1.640077194721863e-02 ,  9.097277398534155e-01 ,  9.263824529113791e-03 ,  1.085712884857523e-01 ,  1.232355174677448e-01 ,  5.019120786558526e-02 ,  -1.941438120614664e-02 ,  -4.139135164062696e-02 ,  1.174354504504209e-02 ,  -9.819365520732998e-02 ,  1.880359124097869e-01 ,  -3.488976066502517e-02 ,  4.185228179429118e-03 ,  -8.211221342119680e-02 ,  3.270876268407105e-02 ,  2.497684475814423e-01 ,  5.414998570137848e-02 ,  -2.713469301656606e-01 ,  -3.558870346148947e-01 ,  -2.766600192420698e-01 ,  8.356255275771110e-02 ,  -1.337305445903517e-01 ,  2.744535644179737e-01 ,  6.701965285527603e-02 ,  -1.244349695862775e-01 ,  1.131126522467240e-01 ,  2.887062161087668e-01 ,  4.427570903884219e-01 ,  -4.739388008389711e-01 ,  2.714194053423313e-01 ,  -2.094186160559807e-02 ,  2.324466244909566e-01 ,  1.699699896342259e-01 ,  8.980882926367841e-01 ,  1.760154126725826e-01 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_diagonal_d() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  9.693881604049188e-01 ,  6.133268205467090e-01 ,  4.426063286462090e-02 ,  4.055144158407464e-03 ,  1.339725270491339e-01 ,  9.410022713958340e-01 ,  3.028605620290723e-01 ,  3.661456016604264e-01 ,  8.981962445391883e-01 ,  3.143638049564507e-01 ,  5.489821840124055e-01 ,  4.360309576241223e-01 ,  6.499417612685054e-02 ,  5.845462257019302e-01 ,  8.440678976619022e-01 ,  1.564189183874064e-01 ,  2.242989686860415e-01 ,  4.128702077148407e-01 ,  3.692486905862902e-02 ,  4.966034986165482e-01 ,  8.179828644296319e-01 ,  6.578909387591091e-01 ,  5.334837356527721e-01 ,  8.551257407736000e-01 ,  1.496881349714015e-01 ,  5.672354768631239e-01 ,  3.741748177480889e-01 ,  6.013045471136395e-01 ,  1.129157018944362e-01 ,  7.755127010728279e-01 ,  9.660583318435267e-02 ,  1.663637457932475e-01 ,  8.074497520247557e-01 ,  9.476939242234907e-01 ,  4.332315025514858e-01 ,  4.140808317483012e-01 ,  2.454818761407551e-01 ,  2.747033919655770e-01 ,  6.172527709741663e-01 ,  1.784604107207253e-01 ,  1.194825043307771e-01 ,  4.557348586810382e-01 ,  1.649378065796322e-01 ,  6.487248312162270e-01 ,  8.210556743614970e-01 ,  7.775113893753993e-01 ,  4.801333902243475e-01 ,  3.475712562208170e-01 ,  4.347105489944344e-01 ,  5.008574909348362e-03 ,  7.125732007896374e-01 ,  3.316572226354955e-01 ,  3.194232377605339e-01 ,  7.992503242021254e-02 ,  4.480559260010161e-01 ;
z <<  5.828489673005941e-01 ,  3.905869418428840e-01 ,  8.695455453974028e-01 ,  6.733532167485129e-01 ,  2.414082418108049e-01 ,  5.253538488765902e-01 ,  9.105338176465975e-01 ,  5.201096943214129e-01 ,  6.021048687389493e-01 ,  6.277362381152096e-02 ,  4.893861165217643e-01 ,  4.614412627964344e-01 ,  4.011298800689024e-01 ,  4.204353581465221e-01 ,  5.849350493343958e-01 ,  5.386670484231432e-01 ,  4.898957587909363e-01 ,  1.657964405322077e-01 ,  4.413468174535875e-01 ,  9.686781985609425e-01 ,  4.151736932178327e-01 ,  3.531782978783116e-02 ,  2.830426682370324e-03 ,  5.354184513162129e-01 ,  5.057294182209637e-02 ,  9.274340534219172e-02 ,  1.087564126269691e-01 ,  4.540783303488197e-01 ,  9.926880657637538e-01 ,  4.850553508050713e-01 ,  4.586402838083844e-01 ,  4.365108145371187e-01 ,  5.011121848422556e-01 ,  4.470874692740242e-01 ,  7.262152005666610e-01 ,  8.979415356273188e-01 ,  6.978703473377672e-01 ,  4.233106026677405e-01 ,  6.495291182373754e-01 ,  9.095405975236686e-01 ,  1.536273415359948e-01 ,  2.373424569000443e-01 ,  6.191120001144675e-01 ,  6.870199456481508e-01 ,  6.426002227117794e-01 ,  5.885285628983279e-01 ,  8.294231938453709e-01 ,  4.789429532356768e-01 ,  8.075888612596384e-01 ,  9.623558468839565e-01 ,  4.353566829205651e-01 ,  8.588455784808138e-01 ,  7.182423791983076e-01 ,  8.886814943629995e-01 ,  4.623588619564345e-02 ,  9.130986448423635e-01 ,  7.668385355448595e-01 ,  9.623789273619899e-01 ,  9.813193590694200e-01 ,  2.854857307868702e-01 ,  6.700013166466804e-01 ,  1.412735310270223e-01 ,  5.951327636887873e-01 ,  9.195796756956715e-01 ,  1.919733210344334e-01 ,  3.498686863671552e-01 ,  7.974567705000712e-02 ,  1.946563156451762e-01 ,  2.077026664188026e-01 ,  9.600092980546204e-02 ,  9.996980377175202e-01 ,  8.875339549944073e-01 ,  4.637599726257671e-01 ,  7.437024470523893e-01 ,  6.952367933641160e-01 ,  5.224546098893470e-01 ,  4.234867948861591e-01 ,  6.640733237821220e-01 ,  5.555198729672033e-01 ,  2.658898278886870e-01 ,  3.643255465919335e-01 ,  6.272667630222782e-01 ,  6.271288917045859e-01 ,  2.095937611451607e-01 ,  6.097729907070338e-01 ,  8.749287603932815e-01 ,  8.713374496408887e-01 ,  6.522633075694795e-01 ,  7.017267325726095e-02 ,  4.235180899286221e-01 ,  8.902228492414066e-02 ,  5.524979791048534e-02 ,  2.546980854885439e-01 ,  4.568737627876636e-01 ,  7.593995049120491e-01 ,  6.288415398407439e-01 ,  2.824846019348571e-01 ,  6.950690619200575e-01 ,  5.065069608344968e-01 ,  5.075296156707131e-01 ;
g <<  1.901542784951112e+00 ,  1.705578134902462e+00 ,  9.737025195080641e-01 ,  1.491484345212421e+00 ,  1.899076985882573e+00 ,  1.705578134902462e+00 ,  2.102495915993846e+00 ,  1.498420504776956e+00 ,  1.236851733837826e+00 ,  2.207127188738190e+00 ,  9.737025195080641e-01 ,  1.498420504776956e+00 ,  1.451111383108529e+00 ,  5.405111652925707e-01 ,  1.640097457241883e+00 ,  1.491484345212421e+00 ,  1.236851733837826e+00 ,  5.405111652925707e-01 ,  1.360710787966147e+00 ,  1.439290005698094e+00 ,  1.899076985882573e+00 ,  2.207127188738190e+00 ,  1.640097457241883e+00 ,  1.439290005698094e+00 ,  2.682633976423498e+00 ;
w.d <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g, Vector::Ones(r));
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  2.076371594295575e-01 ,  3.495031279755610e-01 ,  -1.395512019185771e-01 ,  -4.810776549138022e-02 ,  -1.983494851280507e-01 ,  2.940282376455126e-01 ,  -2.246871049544440e-01 ,  2.365798467829285e-01 ,  3.297401036000611e-01 ,  -8.285912838007103e-02 ,  1.125019468851556e-01 ,  -1.308312253779721e-01 ,  5.206893300271351e-02 ,  3.132203317179372e-01 ,  -2.134600282539837e-03 ,  4.203770502170799e-02 ,  -5.771152436641663e-02 ,  2.097995063475935e-01 ,  -3.244817743051857e-02 ,  -1.336681953610273e-01 ,  2.181438781269179e-01 ,  2.449243000384934e-01 ,  1.617333075837322e-01 ,  1.639854346660682e-01 ,  -1.413264630318153e-01 ,  2.909735267332807e-01 ,  7.286276123769003e-02 ,  1.682022112762752e-01 ,  -2.762566356536453e-01 ,  -7.539759850638159e-03 ,  -1.398227098876807e-01 ,  -1.237463540278320e-02 ,  3.008528079687820e-01 ,  2.521027311172826e-01 ,  -5.267144314723136e-02 ,  1.232572631593528e-01 ,  1.141786192162639e-01 ,  1.707337116648823e-01 ,  -1.693987896921493e-02 ,  -2.240795237637296e-01 ,  -1.105316910982257e-01 ,  3.986972365689961e-04 ,  -1.728035404438059e-01 ,  8.111408503252358e-02 ,  2.805154393478925e-01 ,  3.176242174339149e-01 ,  -9.538784482501252e-02 ,  2.405859967433750e-01 ,  9.618909853097282e-03 ,  -2.671373164388740e-01 ,  -4.938966856448117e-01 ,  -4.630042148984120e-01 ,  -4.971973924717768e-01 ,  -5.858149906878793e-01 ,  -4.533561019061757e-01 ;
s_z <<  -2.965894410853402e-01 ,  -2.770858549200328e-01 ,  -2.327969510070496e-01 ,  -3.943046056925317e-02 ,  4.102973452234213e-01 ,  -3.254854008772913e-01 ,  -2.228424977937427e-01 ,  -2.594921486325631e-01 ,  -3.460299816511301e-01 ,  4.734416064747262e-01 ,  -1.079913777621085e-01 ,  1.323941774799497e-01 ,  4.399857940016123e-02 ,  -1.478406991765791e-01 ,  -1.294443471456805e-01 ,  -8.680806780003854e-02 ,  3.081998047389243e-02 ,  1.216014455919757e-01 ,  1.769163506648096e-01 ,  -3.816539012937399e-01 ,  -1.394208856999388e-01 ,  1.827620850720875e-01 ,  3.326336582056753e-01 ,  -1.135888952944021e-01 ,  5.441096231158952e-01 ,  1.101797535693390e-01 ,  2.813850410337533e-01 ,  -1.250831491533188e-01 ,  -1.306164394222296e-01 ,  -2.415948904825771e-02 ,  1.750791117241079e-01 ,  3.886803576407621e-02 ,  -3.047676003392596e-01 ,  -1.133752097034280e-01 ,  -2.201876555132538e-01 ,  -5.273021131418597e-01 ,  -3.490447516556191e-01 ,  -9.684692186084581e-02 ,  -4.677424858028065e-02 ,  -2.321049718537634e-01 ,  4.508010352070416e-01 ,  2.252630607617994e-01 ,  5.088893280111486e-02 ,  -1.823190399927943e-01 ,  -4.697595601534969e-01 ,  -4.122560946874312e-01 ,  -2.710311341219463e-01 ,  -2.223315575072757e-01 ,  -2.313927804248558e-01 ,  -2.418624285389065e-01 ,  2.661771621538055e-01 ,  -4.633823560684119e-02 ,  -3.605961886451075e-01 ,  -3.509742691665009e-01 ,  2.087707305824818e-01 ,  -1.251737215520381e-01 ,  -5.285214256008900e-01 ,  -2.286016881072855e-01 ,  -6.576426478148054e-02 ,  8.501124273923422e-02 ,  -6.360268411671254e-02 ,  1.908994584934180e-01 ,  -4.586643821429742e-02 ,  -2.054435328985561e-02 ,  2.592481805892024e-01 ,  1.860657042993631e-01 ,  3.255470134819881e-01 ,  5.123405831741948e-01 ,  3.456641468385592e-01 ,  2.236869767396860e-01 ,  -2.876574739457898e-01 ,  -1.796054400575020e-01 ,  1.951707274297427e-01 ,  6.097978301558825e-03 ,  -3.832071544897558e-01 ,  2.624156024887456e-01 ,  1.123801812499428e-01 ,  1.326279965930228e-03 ,  -2.459615179329688e-01 ,  1.799265141668505e-01 ,  -1.025157083480333e-02 ,  -1.766371835266502e-01 ,  1.709213087359735e-01 ,  6.283239606600017e-01 ,  -2.090883319480902e-01 ,  -2.577748115891162e-01 ,  -2.941546155262131e-01 ,  1.566779656718113e-02 ,  4.987024384614033e-01 ,  -1.942415117861763e-01 ,  2.943427096224447e-01 ,  4.081531142244952e-01 ,  6.969576653942731e-02 ,  2.100553129327384e-01 ,  -2.552796365798094e-02 ,  1.826793632379830e-01 ,  8.513176813854215e-02 ,  4.271432729509511e-02 ,  8.892693970647939e-02 ,  -3.213108302034120e-01 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_random() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  5.885285628983279e-01 ,  8.294231938453709e-01 ,  4.789429532356768e-01 ,  8.075888612596384e-01 ,  9.623558468839565e-01 ,  4.353566829205651e-01 ,  8.588455784808138e-01 ,  7.182423791983076e-01 ,  8.886814943629995e-01 ,  4.623588619564345e-02 ,  9.130986448423635e-01 ,  7.668385355448595e-01 ,  9.623789273619899e-01 ,  9.813193590694200e-01 ,  2.854857307868702e-01 ,  6.700013166466804e-01 ,  1.412735310270223e-01 ,  5.951327636887873e-01 ,  9.195796756956715e-01 ,  1.919733210344334e-01 ,  3.498686863671552e-01 ,  7.974567705000712e-02 ,  1.946563156451762e-01 ,  2.077026664188026e-01 ,  9.600092980546204e-02 ,  9.996980377175202e-01 ,  8.875339549944073e-01 ,  4.637599726257671e-01 ,  7.437024470523893e-01 ,  6.952367933641160e-01 ,  5.224546098893470e-01 ,  4.234867948861591e-01 ,  6.640733237821220e-01 ,  5.555198729672033e-01 ,  2.658898278886870e-01 ,  3.643255465919335e-01 ,  6.272667630222782e-01 ,  6.271288917045859e-01 ,  2.095937611451607e-01 ,  6.097729907070338e-01 ,  8.749287603932815e-01 ,  8.713374496408887e-01 ,  6.522633075694795e-01 ,  7.017267325726095e-02 ,  4.235180899286221e-01 ,  8.902228492414066e-02 ,  5.524979791048534e-02 ,  2.546980854885439e-01 ,  4.568737627876636e-01 ,  7.593995049120491e-01 ,  6.288415398407439e-01 ,  2.824846019348571e-01 ,  6.950690619200575e-01 ,  5.065069608344968e-01 ,  5.075296156707131e-01 ;
z <<  2.636220634323303e-01 ,  4.416456866227010e-01 ,  3.415258701814652e-01 ,  7.265463939090130e-01 ,  4.825965308099226e-01 ,  4.467655781900614e-01 ,  4.770080937980686e-01 ,  4.799113726910161e-01 ,  6.896387006328037e-01 ,  7.198476893232635e-01 ,  8.010969737326715e-01 ,  4.052568816458992e-01 ,  7.935398606099887e-01 ,  9.647259459117272e-01 ,  9.923494116644874e-01 ,  7.206556019502786e-01 ,  6.548864838133828e-02 ,  8.472865278538246e-01 ,  8.364569716615516e-01 ,  1.631781899759521e-02 ,  3.276657287139964e-01 ,  3.220972200771334e-01 ,  7.404421224932046e-01 ,  6.103062881081006e-01 ,  2.823220462034699e-01 ,  1.863655614916040e-01 ,  1.685303919592733e-01 ,  9.545322921951538e-02 ,  7.905727387751030e-01 ,  9.357357476153892e-01 ,  2.198763383182067e-01 ,  7.449126919648740e-01 ,  9.511437223975017e-01 ,  1.917272252554406e-01 ,  5.718944518557192e-01 ,  4.393126809218142e-01 ,  9.748609274965017e-01 ,  8.695919110882055e-01 ,  1.604811394571537e-02 ,  2.013272742878226e-01 ,  8.479840747120673e-01 ,  5.742410733609326e-01 ,  5.228193173754018e-01 ,  8.098135781591498e-01 ,  7.640417052117675e-01 ,  9.547463494211380e-01 ,  3.266982426512590e-01 ,  4.765403015638958e-02 ,  6.922827853132590e-01 ,  5.013804909997255e-02 ,  5.651792240587357e-01 ,  8.597363526759456e-01 ,  3.970282399994222e-01 ,  6.011588397499769e-01 ,  1.714301613920506e-01 ,  1.577357062504808e-01 ,  6.060550718704039e-01 ,  8.644831653341858e-01 ,  9.998379659971401e-01 ,  3.113873096489617e-02 ,  9.209823275856519e-01 ,  5.111182541062665e-01 ,  3.493556684867074e-01 ,  3.974146652165286e-01 ,  5.778894564577020e-01 ,  3.476968859110544e-01 ,  1.455089742241399e-01 ,  8.655634034033419e-01 ,  7.064894398362059e-01 ,  6.098549399645308e-01 ,  7.225590306663150e-01 ,  9.860259041500742e-01 ,  1.750929009451389e-01 ,  8.241687672106883e-01 ,  8.223043071102077e-01 ,  3.433478247795110e-01 ,  5.587765910686205e-01 ,  4.583951040226183e-01 ,  1.943362585979126e-01 ,  4.328975725259948e-01 ,  1.525588709216097e-01 ,  9.322031204414301e-01 ,  1.874633777145578e-01 ,  6.338814511159659e-01 ,  5.700125055668297e-01 ,  9.746576540880918e-01 ,  7.935980998050621e-01 ,  3.601908650928504e-01 ,  3.761162382383360e-01 ,  4.989812229130441e-02 ,  5.183772866050185e-02 ,  3.109734427656744e-01 ,  9.498307423540859e-01 ,  4.954204395411921e-02 ,  1.767432399067472e-01 ,  6.361861121994160e-01 ,  3.604618149695636e-01 ,  1.855770297544811e-01 ,  9.473848480754395e-01 ,  4.276934560990486e-02 ;
g <<  1.901542784951112e+00 ,  1.705578134902462e+00 ,  9.737025195080641e-01 ,  1.491484345212421e+00 ,  1.899076985882573e+00 ,  1.705578134902462e+00 ,  2.102495915993846e+00 ,  1.498420504776956e+00 ,  1.236851733837826e+00 ,  2.207127188738190e+00 ,  9.737025195080641e-01 ,  1.498420504776956e+00 ,  1.451111383108529e+00 ,  5.405111652925707e-01 ,  1.640097457241883e+00 ,  1.491484345212421e+00 ,  1.236851733837826e+00 ,  5.405111652925707e-01 ,  1.360710787966147e+00 ,  1.439290005698094e+00 ,  1.899076985882573e+00 ,  2.207127188738190e+00 ,  1.640097457241883e+00 ,  1.439290005698094e+00 ,  2.682633976423498e+00 ;
w.d <<  9.693881604049188e-01 ,  6.133268205467090e-01 ,  4.426063286462090e-02 ,  4.055144158407464e-03 ,  1.339725270491339e-01 ,  9.410022713958340e-01 ,  3.028605620290723e-01 ,  3.661456016604264e-01 ,  8.981962445391883e-01 ,  3.143638049564507e-01 ,  5.489821840124055e-01 ,  4.360309576241223e-01 ,  6.499417612685054e-02 ,  5.845462257019302e-01 ,  8.440678976619022e-01 ,  1.564189183874064e-01 ,  2.242989686860415e-01 ,  4.128702077148407e-01 ,  3.692486905862902e-02 ,  4.966034986165482e-01 ,  8.179828644296319e-01 ,  6.578909387591091e-01 ,  5.334837356527721e-01 ,  8.551257407736000e-01 ,  1.496881349714015e-01 ,  5.672354768631239e-01 ,  3.741748177480889e-01 ,  6.013045471136395e-01 ,  1.129157018944362e-01 ,  7.755127010728279e-01 ,  9.660583318435267e-02 ,  1.663637457932475e-01 ,  8.074497520247557e-01 ,  9.476939242234907e-01 ,  4.332315025514858e-01 ,  4.140808317483012e-01 ,  2.454818761407551e-01 ,  2.747033919655770e-01 ,  6.172527709741663e-01 ,  1.784604107207253e-01 ,  1.194825043307771e-01 ,  4.557348586810382e-01 ,  1.649378065796322e-01 ,  6.487248312162270e-01 ,  8.210556743614970e-01 ,  7.775113893753993e-01 ,  4.801333902243475e-01 ,  3.475712562208170e-01 ,  4.347105489944344e-01 ,  5.008574909348362e-03 ,  7.125732007896374e-01 ,  3.316572226354955e-01 ,  3.194232377605339e-01 ,  7.992503242021254e-02 ,  4.480559260010161e-01 ,  5.828489673005941e-01 ,  3.905869418428840e-01 ,  8.695455453974028e-01 ,  6.733532167485129e-01 ,  2.414082418108049e-01 ,  5.253538488765902e-01 ,  9.105338176465975e-01 ,  5.201096943214129e-01 ,  6.021048687389493e-01 ,  6.277362381152096e-02 ,  4.893861165217643e-01 ,  4.614412627964344e-01 ,  4.011298800689024e-01 ,  4.204353581465221e-01 ,  5.849350493343958e-01 ,  5.386670484231432e-01 ,  4.898957587909363e-01 ,  1.657964405322077e-01 ,  4.413468174535875e-01 ,  9.686781985609425e-01 ,  4.151736932178327e-01 ,  3.531782978783116e-02 ,  2.830426682370324e-03 ,  5.354184513162129e-01 ,  5.057294182209637e-02 ,  9.274340534219172e-02 ,  1.087564126269691e-01 ,  4.540783303488197e-01 ,  9.926880657637538e-01 ,  4.850553508050713e-01 ,  4.586402838083844e-01 ,  4.365108145371187e-01 ,  5.011121848422556e-01 ,  4.470874692740242e-01 ,  7.262152005666610e-01 ,  8.979415356273188e-01 ,  6.978703473377672e-01 ,  4.233106026677405e-01 ,  6.495291182373754e-01 ,  9.095405975236686e-01 ,  1.536273415359948e-01 ,  2.373424569000443e-01 ,  6.191120001144675e-01 ,  6.870199456481508e-01 ,  6.426002227117794e-01 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g, Vector::Ones(r));
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  1.916314225353135e-01 ,  2.221787076077385e-01 ,  1.653896713317812e-01 ,  -6.483544014018283e-02 ,  -1.149221413372893e-01 ,  -7.382126130568167e-02 ,  1.318636017936666e-01 ,  1.607939674636689e-01 ,  4.069003370969570e-01 ,  -3.442971547080212e-01 ,  1.470516843491386e-01 ,  2.110555923497029e-01 ,  -2.765178525216014e-01 ,  -1.781325450737145e-01 ,  2.012389237779219e-01 ,  -3.845209738196022e-01 ,  3.594946934856500e-01 ,  2.470811125508889e-02 ,  -1.718646774147286e-01 ,  2.558792849409299e-01 ,  2.119190881437352e-01 ,  2.456661135850774e-01 ,  -3.296013128158349e-01 ,  7.001793944247617e-02 ,  8.326110759733751e-02 ,  1.797432727037013e-01 ,  -8.076149174741887e-02 ,  -5.400902727712141e-02 ,  -1.347435757705595e-01 ,  6.094244082512274e-02 ,  -3.675162970585139e-02 ,  1.724836726452127e-01 ,  -2.465085462878327e-01 ,  3.040605518644618e-01 ,  -2.470321751188647e-02 ,  2.373861924815819e-01 ,  -1.860052923453456e-01 ,  -2.643591590131702e-01 ,  2.973434240317328e-02 ,  1.578136903987200e-01 ,  -5.413930897845349e-01 ,  1.575873766379907e-01 ,  6.782258918645361e-02 ,  -2.103641988449516e-01 ,  8.884502029387149e-02 ,  2.988220446241003e-01 ,  -2.146759109067942e-01 ,  2.225117432376691e-01 ,  1.575291072822295e-02 ,  3.207675407179076e-01 ,  -2.765050268763742e-01 ,  -6.455853015061780e-01 ,  -5.124182600629289e-01 ,  -6.616931196669744e-01 ,  -3.709596236508291e-01 ;
s_z <<  -1.843930701780025e-01 ,  -2.973796695862738e-02 ,  1.243253472337317e-01 ,  -4.397895897653117e-03 ,  2.452170046020562e-02 ,  -1.024857143702242e-01 ,  1.212228019008836e-01 ,  -3.503717633367439e-01 ,  -4.841324161691182e-01 ,  -1.460381536305907e-02 ,  -1.223434294891897e+00 ,  6.713474582189646e-02 ,  -7.083323921936842e-02 ,  -2.136704946149638e-01 ,  -9.746001643591605e-01 ,  -3.812173224891939e-01 ,  9.835174942242595e-01 ,  -8.709186866162461e-01 ,  -7.851550063028284e-02 ,  1.988760046746430e-01 ,  -3.216201725262294e-01 ,  1.182900740216188e-01 ,  1.904040247098998e-01 ,  -2.178756526115966e-02 ,  3.591780905713720e-02 ,  -1.579658025172360e-01 ,  1.490790867892860e+00 ,  7.832537777758203e-01 ,  5.193216323373865e-02 ,  -8.068450251350849e-01 ,  9.666115925508814e-01 ,  -1.633835916640862e+00 ,  -2.380543378269077e-01 ,  1.750621569965216e-01 ,  -4.067839241954985e-01 ,  -9.664631053732927e-01 ,  -5.836289664122927e-01 ,  -3.378716634985535e-01 ,  9.978256757698099e-01 ,  6.622566269211094e-02 ,  -2.518022050146309e-01 ,  -1.892397451060602e-01 ,  -4.742614693445731e-01 ,  9.594783081770335e-02 ,  -5.869603206013851e-01 ,  -1.256654732676993e+00 ,  1.111280699541428e+00 ,  6.969865382509227e-01 ,  -1.066055941860798e-01 ,  1.078826491078396e-02 ,  -1.361863939585575e-01 ,  2.420467847549223e-02 ,  8.790208669971115e-01 ,  -5.381493248033883e-02 ,  1.888320542406974e-01 ,  7.711785014972970e-02 ,  4.388109613208401e-01 ,  -2.199665547365594e-01 ,  1.021090997363876e-01 ,  -1.854229163226696e-02 ,  -9.468391969028669e-01 ,  3.794726050292874e-01 ,  -2.181371779532092e-01 ,  1.430745935623458e-01 ,  -9.065764700853580e-02 ,  -9.311928096636477e-01 ,  1.862796178127857e+00 ,  -8.187797728479086e-01 ,  -5.153253487982287e-01 ,  2.903564873835165e-02 ,  -4.346560947650248e-01 ,  -1.934584804177996e-01 ,  4.658752791772910e-02 ,  -2.094899168746377e-01 ,  -3.799854032111618e-01 ,  2.719355215536911e-01 ,  1.712228278597901e-01 ,  4.991743216240536e-03 ,  6.212211859356767e-01 ,  -1.968459840726650e-02 ,  9.401695562847263e-01 ,  -1.049447508732442e+00 ,  1.727594796260938e-01 ,  3.343167223030398e-01 ,  -4.613001362762150e-01 ,  -1.004635770116181e+00 ,  -7.652000351890937e-01 ,  -2.237657902459315e-01 ,  7.052562317253354e-01 ,  6.594122394912442e-01 ,  -3.527242910613257e-01 ,  7.052875039842794e-01 ,  -8.730938719122974e-01 ,  6.185817780705976e-01 ,  3.112136003699260e-01 ,  -3.961471967845341e-01 ,  2.968182623115427e-01 ,  8.873240600158699e-01 ,  -3.929126357831931e-01 ,  1.009893547842582e+00 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }

