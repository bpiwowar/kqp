

// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_simple() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;
z <<  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ;
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
w.d <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  3.333333333333334e-01 ,  3.333333333333334e-01 ,  3.333333333333334e-01 ,  3.333333333333334e-01 ,  2.500000000000002e-01 ,  2.500000000000002e-01 ;
s_z <<  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_diagonal_g() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  5.591924418401659e-01 ,  7.505073825514859e-01 ,  2.491281817631963e-02 ,  5.517041536663750e-01 ,  4.396027257472488e-01 ,  5.337206373372028e-01 ,  3.951947370228817e-01 ,  8.235565338694456e-01 ,  4.412068277394153e-01 ,  2.012289928325858e-01 ,  3.839798832301057e-01 ,  9.528812518100890e-01 ,  2.866591326310781e-01 ,  8.879474715699711e-01 ,  6.095877214876867e-01 ,  7.965883042160478e-01 ,  8.708135874490500e-01 ,  7.268953201982253e-02 ,  3.755133322848347e-01 ,  2.863011662691143e-01 ,  9.889902058435575e-01 ,  1.516404205851557e-01 ,  7.605025594091515e-01 ,  9.205074061396668e-01 ,  9.454260093227129e-01 ,  2.744743731058564e-01 ,  4.076183441885750e-01 ,  2.123401568637073e-01 ,  1.487822042502257e-01 ,  9.077522492282825e-01 ,  4.756620074446629e-01 ,  5.064796011768659e-01 ,  1.510742879178473e-01 ,  1.592759306491003e-01 ,  9.016171053110863e-01 ,  2.321726164775806e-02 ,  4.799817010758085e-01 ,  2.037370560385019e-01 ,  9.143944388244778e-01 ,  9.152959390002380e-01 ,  4.719375923689950e-01 ,  1.223646023470137e-01 ,  1.471673364197615e-01 ,  7.525737656638304e-01 ,  1.717418774148773e-01 ,  2.293977488178000e-01 ,  6.608936660551000e-01 ,  1.824171315911582e-02 ,  4.176869906038118e-01 ,  2.512806377644962e-01 ,  6.735257125639165e-01 ,  8.710962037939366e-01 ,  9.970573756422056e-01 ,  2.665700919781081e-01 ,  7.147308167712254e-01 ;
z <<  5.988710406714282e-02 ,  4.409308127112753e-01 ,  7.698272112626678e-01 ,  9.940205007070022e-01 ,  9.806278181052098e-01 ,  6.772077567712098e-02 ,  1.554086665729029e-01 ,  1.726566430852595e-01 ,  7.077278203168470e-01 ,  2.174479952115059e-01 ,  2.819764391918024e-01 ,  5.347595313539544e-01 ,  2.353527411152606e-01 ,  3.853254239893820e-01 ,  1.749970532523565e-01 ,  2.710398241405144e-01 ,  3.730311501494146e-01 ,  5.779677577861823e-01 ,  6.308085460044197e-01 ,  8.454417659929881e-01 ,  9.453402853400314e-01 ,  6.606120435040569e-01 ,  4.252221982812020e-01 ,  5.308232800129498e-01 ,  6.918390999154579e-01 ,  8.598448297716221e-02 ,  5.987897287261100e-01 ,  2.910940716974614e-01 ,  1.411828562842272e-01 ,  8.648784664573441e-01 ,  2.300784189368003e-01 ,  5.650817216556036e-01 ,  3.500919151651219e-01 ,  2.074788234020989e-01 ,  1.957687697410236e-01 ,  1.573476958264520e-01 ,  6.591129550395458e-01 ,  1.763283606839501e-01 ,  1.684095720063543e-01 ,  5.143594478360787e-01 ,  3.572073553057371e-01 ,  2.543110198312172e-01 ,  3.748404426808748e-01 ,  9.295081077692831e-01 ,  4.909298825656641e-01 ,  8.822296611301645e-01 ,  9.574773914119239e-02 ,  2.387915946502969e-01 ,  8.477436057391445e-01 ,  1.709340504323882e-01 ,  1.166777037801888e-01 ,  5.007366802297417e-01 ,  7.049115915147182e-01 ,  3.441830653196241e-01 ,  7.108792181008639e-02 ,  9.866208262061031e-01 ,  7.904304200880663e-02 ,  7.009147501653124e-01 ,  3.483104184990544e-01 ,  4.081201904559323e-01 ,  5.793721347848316e-01 ,  9.043204535619374e-01 ,  2.695938344823622e-01 ,  8.359044197967056e-01 ,  9.909044810929675e-01 ,  7.822785893091205e-01 ,  6.138833322697486e-01 ,  1.553225684654491e-01 ,  5.105666911374308e-01 ,  5.107097154530232e-01 ,  4.457059593207425e-01 ,  4.839985687014076e-01 ,  1.863343333615320e-01 ,  6.881449059841045e-01 ,  7.804286068610640e-01 ,  8.038775517878057e-01 ,  2.040898931864421e-01 ,  7.730834845733182e-01 ,  9.095159227833327e-01 ,  1.581375230796469e-01 ,  7.250965849024071e-01 ,  9.767877337429147e-01 ,  8.544216267780602e-02 ,  4.721604174772289e-01 ,  6.405623430299914e-01 ,  8.009276880557981e-02 ,  1.137729092666721e-01 ,  5.693051764576940e-01 ,  8.656990328467851e-02 ,  9.697414127242592e-01 ,  5.420436664781340e-01 ,  7.356882497567883e-01 ,  4.179691593582042e-01 ,  9.990477316170843e-01 ,  9.751438212721314e-01 ,  8.711072857727369e-01 ,  9.919533674508559e-01 ,  2.460904457336616e-01 ,  4.598148695857981e-01 ,  4.179635390049251e-01 ;
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
w.d <<  2.923667869767955e-01 ,  2.387400763867853e-01 ,  9.280905740458014e-01 ,  6.582342164236559e-01 ,  1.842963300982549e-01 ,  2.877857790116009e-01 ,  9.906991192288348e-01 ,  3.165808989034894e-01 ,  5.889316225008749e-01 ,  3.628799491096463e-01 ,  1.997317618082978e-01 ,  7.560329395809898e-01 ,  1.900383891955725e-01 ,  8.362583371968135e-02 ,  3.520935614026344e-02 ,  6.111607901197377e-01 ,  3.504448967668247e-01 ,  8.964798526121228e-01 ,  1.612831492280269e-01 ,  7.376773921877849e-01 ,  2.035893113059453e-01 ,  4.671719530207781e-01 ,  9.005005053082931e-01 ,  4.302166749101357e-01 ,  3.279243703786034e-01 ,  2.584798681448182e-01 ,  7.171805423336509e-01 ,  8.177690683713699e-01 ,  1.224489560743967e-01 ,  7.192071493771810e-01 ,  1.326253712324714e-01 ,  9.631127235007919e-03 ,  6.999799295817503e-01 ,  8.417283788280041e-01 ,  7.554185325475735e-01 ,  5.633032754303412e-01 ,  5.364794061877105e-01 ,  8.416492737898229e-01 ,  5.296278637474787e-01 ,  8.647138915430597e-02 ,  6.206131320942583e-01 ,  8.952344592236444e-01 ,  4.826385286813106e-02 ,  2.817213869053800e-01 ,  2.555509486471208e-01 ,  7.349961152308404e-01 ,  2.523811532205088e-01 ,  6.669903622754718e-01 ,  5.184864930356768e-01 ,  9.747644250553166e-01 ,  9.753306086697690e-01 ,  4.534208865816406e-01 ,  2.253641294767229e-01 ,  2.806979180498422e-01 ,  4.478202337381760e-01 ,  7.267485654646464e-01 ,  5.462345476228406e-01 ,  3.547126523914190e-02 ,  7.364740000620216e-01 ,  1.059059359155612e-02 ,  4.515285369318932e-01 ,  1.540372374479634e-01 ,  5.585717319011582e-01 ,  3.490897762227813e-01 ,  4.504237302397854e-01 ,  4.030956592777751e-01 ,  2.268519993562264e-01 ,  7.352576947862245e-01 ,  3.738814609989549e-02 ,  9.869879367656816e-01 ,  6.548229447738800e-01 ,  7.249100331170737e-01 ,  1.237953441671064e-01 ,  4.857835413441842e-01 ,  4.578621535310357e-01 ,  2.363420301128132e-01 ,  5.479697099650221e-01 ,  9.016335263713019e-01 ,  1.439784250824243e-01 ,  3.496449286962084e-01 ,  3.205728755090764e-02 ,  4.549276308260417e-01 ,  9.774350755643538e-01 ,  2.728860842303324e-01 ,  9.236785125983937e-01 ,  9.829603021290578e-01 ,  5.200581865005958e-01 ,  4.381200322245888e-01 ,  3.419892376966693e-02 ,  1.097714761124021e-01 ,  9.466260430615763e-01 ,  6.736251517139616e-01 ,  1.798186378417962e-01 ,  5.908553621955948e-02 ,  8.276150926529406e-01 ,  9.105246273818580e-01 ,  6.714703554228911e-01 ,  1.035393012061292e-02 ,  2.958670840332120e-01 ,  9.564809934659716e-01 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  3.677606033556066e-01 ,  9.544910955592834e-02 ,  2.712714373561403e-01 ,  -2.178249633206464e-01 ,  -3.350251614602732e-01 ,  4.300677731408637e-01 ,  -1.389502085317532e-01 ,  3.179103710021262e-01 ,  -6.030718010128489e-02 ,  -2.539925713877663e-01 ,  1.862427141847599e-01 ,  3.679305071079442e-01 ,  1.252206221050323e-01 ,  2.100664874176916e-01 ,  4.869441084940200e-01 ,  3.283190970903774e-01 ,  1.302715338877937e-01 ,  -1.442634552039892e-01 ,  -7.552637350762947e-02 ,  -5.317868793330438e-02 ,  -3.784012175454975e-01 ,  -6.959901184269979e-02 ,  -1.789780442810067e-01 ,  1.554813784869360e-01 ,  8.204008593224221e-02 ,  3.537011623342337e-01 ,  -1.304398706940321e-01 ,  2.226373640176011e-01 ,  3.921901383978373e-01 ,  -3.249070480445114e-01 ,  2.485378101400463e-01 ,  -2.981442339992701e-02 ,  -2.297962034247591e-02 ,  -5.463019997259400e-02 ,  4.316373824758030e-01 ,  1.193744425076754e-01 ,  -1.846197085336618e-01 ,  1.927230373755634e-01 ,  -4.964675267047562e-01 ,  2.123675251121968e-01 ,  1.814557426571706e-01 ,  2.055160774047219e-01 ,  9.637744865756415e-03 ,  3.801191568665038e-01 ,  1.833709181724581e-01 ,  -1.122933899080647e-02 ,  4.530482359844383e-01 ,  -1.361067941517727e-01 ,  -1.249285779975550e-01 ,  1.593769018656532e-01 ,  -4.766790004131751e-01 ,  -5.350061841425852e-01 ,  -3.822811622754907e-01 ,  -5.885091466464171e-01 ,  -6.627594554641330e-01 ;
s_z <<  1.677047297247115e-01 ,  -5.754116130854519e-03 ,  -7.098633525296474e-01 ,  -2.851361810993110e-01 ,  9.309354565036285e-02 ,  -7.335160367308702e-02 ,  5.234159554972411e-01 ,  -3.420479636862293e-01 ,  -1.000311263962698e-01 ,  1.927094713709558e+00 ,  4.235604272460486e-02 ,  -4.863331146961555e-01 ,  1.142284942904766e-01 ,  -8.230428869298809e-02 ,  2.324080322561209e-02 ,  -2.007326431947337e-01 ,  9.046643394687906e-02 ,  -5.736117789693544e-02 ,  2.060164022631366e-01 ,  -1.755559055584885e-01 ,  -4.433438415915669e-01 ,  -1.198848671385905e-01 ,  1.510682198104064e-01 ,  -2.273168790444875e-01 ,  -3.388577989957692e-01 ,  1.431189027110343e-01 ,  9.294218425616056e-02 ,  -1.607425354218420e-01 ,  4.502786608556615e-01 ,  1.707269416852048e-01 ,  -1.460677278916599e-02 ,  -2.711147996701762e-02 ,  7.881492757343640e-02 ,  5.175785136572350e-01 ,  4.679962394896632e-02 ,  3.549719499257105e-01 ,  1.127963849846793e-01 ,  1.571885656884794e-02 ,  1.730587010395341e+00 ,  -7.397535544386209e-01 ,  -9.987558165352910e-02 ,  8.397698070273345e-02 ,  -4.552113311681419e-02 ,  -2.559685389563871e+00 ,  -4.516260000242166e-02 ,  -5.364944297730582e-01 ,  -5.463875098073248e-02 ,  4.191910072330123e-01 ,  -2.590344838277799e-01 ,  3.410552279308159e-01 ,  7.461694460519090e-01 ,  2.860887473594913e-01 ,  -2.278933741688989e-01 ,  9.441152321422304e-02 ,  5.731013314235929e-01 ,  -1.099060341467575e-01 ,  5.803604605048046e-01 ,  -2.038881000775808e-02 ,  2.442605550649832e-01 ,  6.106301925798301e-02 ,  1.850372080152838e-01 ,  -8.983297378827247e-03 ,  4.259219296479896e-01 ,  -1.069317644776124e-01 ,  3.525548771168164e-01 ,  5.636257218730322e-02 ,  2.265546960418265e-01 ,  1.124709597634283e-01 ,  6.462160479690744e-02 ,  1.001745293886787e-01 ,  -5.305681165051984e-01 ,  -2.564648791185872e-02 ,  1.370712666709535e-01 ,  1.149598831502638e-01 ,  -7.781614005420091e-02 ,  1.121366815159897e-01 ,  3.658531057764265e-01 ,  -1.865114299343105e-01 ,  4.944029789197270e-01 ,  5.139925381160649e-01 ,  3.750337598696477e-03 ,  -1.036639546698777e+00 ,  2.801816571776771e-01 ,  2.261695731780151e-01 ,  4.913338230996256e-01 ,  5.249048949359580e-01 ,  4.549751787091239e-01 ,  1.300790371173633e-02 ,  1.599967500098844e-01 ,  -8.619218352411234e-01 ,  1.226366815524642e-01 ,  7.176115348750171e-03 ,  -1.448695893240826e-01 ,  -5.148371335943310e-01 ,  -1.558858082469038e-01 ,  -4.455207603959105e-01 ,  -5.806581470565346e-03 ,  8.105365699671314e-03 ,  1.272767153321275e-02 ,  4.225623102663778e-01 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_diagonal_d() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  9.693881604049188e-01 ,  6.133268205467090e-01 ,  4.426063286462090e-02 ,  4.055144158407464e-03 ,  1.339725270491339e-01 ,  9.410022713958340e-01 ,  3.028605620290723e-01 ,  3.661456016604264e-01 ,  8.981962445391883e-01 ,  3.143638049564507e-01 ,  5.489821840124055e-01 ,  4.360309576241223e-01 ,  6.499417612685054e-02 ,  5.845462257019302e-01 ,  8.440678976619022e-01 ,  1.564189183874064e-01 ,  2.242989686860415e-01 ,  4.128702077148407e-01 ,  3.692486905862902e-02 ,  4.966034986165482e-01 ,  8.179828644296319e-01 ,  6.578909387591091e-01 ,  5.334837356527721e-01 ,  8.551257407736000e-01 ,  1.496881349714015e-01 ,  5.672354768631239e-01 ,  3.741748177480889e-01 ,  6.013045471136395e-01 ,  1.129157018944362e-01 ,  7.755127010728279e-01 ,  9.660583318435267e-02 ,  1.663637457932475e-01 ,  8.074497520247557e-01 ,  9.476939242234907e-01 ,  4.332315025514858e-01 ,  4.140808317483012e-01 ,  2.454818761407551e-01 ,  2.747033919655770e-01 ,  6.172527709741663e-01 ,  1.784604107207253e-01 ,  1.194825043307771e-01 ,  4.557348586810382e-01 ,  1.649378065796322e-01 ,  6.487248312162270e-01 ,  8.210556743614970e-01 ,  7.775113893753993e-01 ,  4.801333902243475e-01 ,  3.475712562208170e-01 ,  4.347105489944344e-01 ,  5.008574909348362e-03 ,  7.125732007896374e-01 ,  3.316572226354955e-01 ,  3.194232377605339e-01 ,  7.992503242021254e-02 ,  4.480559260010161e-01 ;
z <<  5.828489673005941e-01 ,  3.905869418428840e-01 ,  8.695455453974028e-01 ,  6.733532167485129e-01 ,  2.414082418108049e-01 ,  5.253538488765902e-01 ,  9.105338176465975e-01 ,  5.201096943214129e-01 ,  6.021048687389493e-01 ,  6.277362381152096e-02 ,  4.893861165217643e-01 ,  4.614412627964344e-01 ,  4.011298800689024e-01 ,  4.204353581465221e-01 ,  5.849350493343958e-01 ,  5.386670484231432e-01 ,  4.898957587909363e-01 ,  1.657964405322077e-01 ,  4.413468174535875e-01 ,  9.686781985609425e-01 ,  4.151736932178327e-01 ,  3.531782978783116e-02 ,  2.830426682370324e-03 ,  5.354184513162129e-01 ,  5.057294182209637e-02 ,  9.274340534219172e-02 ,  1.087564126269691e-01 ,  4.540783303488197e-01 ,  9.926880657637538e-01 ,  4.850553508050713e-01 ,  4.586402838083844e-01 ,  4.365108145371187e-01 ,  5.011121848422556e-01 ,  4.470874692740242e-01 ,  7.262152005666610e-01 ,  8.979415356273188e-01 ,  6.978703473377672e-01 ,  4.233106026677405e-01 ,  6.495291182373754e-01 ,  9.095405975236686e-01 ,  1.536273415359948e-01 ,  2.373424569000443e-01 ,  6.191120001144675e-01 ,  6.870199456481508e-01 ,  6.426002227117794e-01 ,  5.885285628983279e-01 ,  8.294231938453709e-01 ,  4.789429532356768e-01 ,  8.075888612596384e-01 ,  9.623558468839565e-01 ,  4.353566829205651e-01 ,  8.588455784808138e-01 ,  7.182423791983076e-01 ,  8.886814943629995e-01 ,  4.623588619564345e-02 ,  9.130986448423635e-01 ,  7.668385355448595e-01 ,  9.623789273619899e-01 ,  9.813193590694200e-01 ,  2.854857307868702e-01 ,  6.700013166466804e-01 ,  1.412735310270223e-01 ,  5.951327636887873e-01 ,  9.195796756956715e-01 ,  1.919733210344334e-01 ,  3.498686863671552e-01 ,  7.974567705000712e-02 ,  1.946563156451762e-01 ,  2.077026664188026e-01 ,  9.600092980546204e-02 ,  9.996980377175202e-01 ,  8.875339549944073e-01 ,  4.637599726257671e-01 ,  7.437024470523893e-01 ,  6.952367933641160e-01 ,  5.224546098893470e-01 ,  4.234867948861591e-01 ,  6.640733237821220e-01 ,  5.555198729672033e-01 ,  2.658898278886870e-01 ,  3.643255465919335e-01 ,  6.272667630222782e-01 ,  6.271288917045859e-01 ,  2.095937611451607e-01 ,  6.097729907070338e-01 ,  8.749287603932815e-01 ,  8.713374496408887e-01 ,  6.522633075694795e-01 ,  7.017267325726095e-02 ,  4.235180899286221e-01 ,  8.902228492414066e-02 ,  5.524979791048534e-02 ,  2.546980854885439e-01 ,  4.568737627876636e-01 ,  7.593995049120491e-01 ,  6.288415398407439e-01 ,  2.824846019348571e-01 ,  6.950690619200575e-01 ,  5.065069608344968e-01 ,  5.075296156707131e-01 ;
g <<  1.901542784951112e+00 ,  1.705578134902462e+00 ,  9.737025195080641e-01 ,  1.491484345212421e+00 ,  1.899076985882573e+00 ,  1.705578134902462e+00 ,  2.102495915993846e+00 ,  1.498420504776956e+00 ,  1.236851733837826e+00 ,  2.207127188738190e+00 ,  9.737025195080641e-01 ,  1.498420504776956e+00 ,  1.451111383108529e+00 ,  5.405111652925707e-01 ,  1.640097457241883e+00 ,  1.491484345212421e+00 ,  1.236851733837826e+00 ,  5.405111652925707e-01 ,  1.360710787966147e+00 ,  1.439290005698094e+00 ,  1.899076985882573e+00 ,  2.207127188738190e+00 ,  1.640097457241883e+00 ,  1.439290005698094e+00 ,  2.682633976423498e+00 ;
w.d <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  2.076371594295575e-01 ,  3.495031279755610e-01 ,  -1.395512019185771e-01 ,  -4.810776549138022e-02 ,  -1.983494851280507e-01 ,  2.940282376455126e-01 ,  -2.246871049544440e-01 ,  2.365798467829285e-01 ,  3.297401036000611e-01 ,  -8.285912838007103e-02 ,  1.125019468851556e-01 ,  -1.308312253779721e-01 ,  5.206893300271351e-02 ,  3.132203317179372e-01 ,  -2.134600282539837e-03 ,  4.203770502170799e-02 ,  -5.771152436641663e-02 ,  2.097995063475935e-01 ,  -3.244817743051857e-02 ,  -1.336681953610273e-01 ,  2.181438781269179e-01 ,  2.449243000384934e-01 ,  1.617333075837322e-01 ,  1.639854346660682e-01 ,  -1.413264630318153e-01 ,  2.909735267332807e-01 ,  7.286276123769003e-02 ,  1.682022112762752e-01 ,  -2.762566356536453e-01 ,  -7.539759850638159e-03 ,  -1.398227098876807e-01 ,  -1.237463540278320e-02 ,  3.008528079687820e-01 ,  2.521027311172826e-01 ,  -5.267144314723136e-02 ,  1.232572631593528e-01 ,  1.141786192162639e-01 ,  1.707337116648823e-01 ,  -1.693987896921493e-02 ,  -2.240795237637296e-01 ,  -1.105316910982257e-01 ,  3.986972365689961e-04 ,  -1.728035404438059e-01 ,  8.111408503252358e-02 ,  2.805154393478925e-01 ,  3.176242174339149e-01 ,  -9.538784482501252e-02 ,  2.405859967433750e-01 ,  9.618909853097282e-03 ,  -2.671373164388740e-01 ,  -4.938966856448117e-01 ,  -4.630042148984120e-01 ,  -4.971973924717768e-01 ,  -5.858149906878793e-01 ,  -4.533561019061757e-01 ;
s_z <<  -2.965894410853402e-01 ,  -2.770858549200328e-01 ,  -2.327969510070496e-01 ,  -3.943046056925317e-02 ,  4.102973452234213e-01 ,  -3.254854008772913e-01 ,  -2.228424977937427e-01 ,  -2.594921486325631e-01 ,  -3.460299816511301e-01 ,  4.734416064747262e-01 ,  -1.079913777621085e-01 ,  1.323941774799497e-01 ,  4.399857940016123e-02 ,  -1.478406991765791e-01 ,  -1.294443471456805e-01 ,  -8.680806780003854e-02 ,  3.081998047389243e-02 ,  1.216014455919757e-01 ,  1.769163506648096e-01 ,  -3.816539012937399e-01 ,  -1.394208856999388e-01 ,  1.827620850720875e-01 ,  3.326336582056753e-01 ,  -1.135888952944021e-01 ,  5.441096231158952e-01 ,  1.101797535693390e-01 ,  2.813850410337533e-01 ,  -1.250831491533188e-01 ,  -1.306164394222296e-01 ,  -2.415948904825771e-02 ,  1.750791117241079e-01 ,  3.886803576407621e-02 ,  -3.047676003392596e-01 ,  -1.133752097034280e-01 ,  -2.201876555132538e-01 ,  -5.273021131418597e-01 ,  -3.490447516556191e-01 ,  -9.684692186084581e-02 ,  -4.677424858028065e-02 ,  -2.321049718537634e-01 ,  4.508010352070416e-01 ,  2.252630607617994e-01 ,  5.088893280111486e-02 ,  -1.823190399927943e-01 ,  -4.697595601534969e-01 ,  -4.122560946874312e-01 ,  -2.710311341219463e-01 ,  -2.223315575072757e-01 ,  -2.313927804248558e-01 ,  -2.418624285389065e-01 ,  2.661771621538055e-01 ,  -4.633823560684119e-02 ,  -3.605961886451075e-01 ,  -3.509742691665009e-01 ,  2.087707305824818e-01 ,  -1.251737215520381e-01 ,  -5.285214256008900e-01 ,  -2.286016881072855e-01 ,  -6.576426478148054e-02 ,  8.501124273923422e-02 ,  -6.360268411671254e-02 ,  1.908994584934180e-01 ,  -4.586643821429742e-02 ,  -2.054435328985561e-02 ,  2.592481805892024e-01 ,  1.860657042993631e-01 ,  3.255470134819881e-01 ,  5.123405831741948e-01 ,  3.456641468385592e-01 ,  2.236869767396860e-01 ,  -2.876574739457898e-01 ,  -1.796054400575020e-01 ,  1.951707274297427e-01 ,  6.097978301558825e-03 ,  -3.832071544897558e-01 ,  2.624156024887456e-01 ,  1.123801812499428e-01 ,  1.326279965930228e-03 ,  -2.459615179329688e-01 ,  1.799265141668505e-01 ,  -1.025157083480333e-02 ,  -1.766371835266502e-01 ,  1.709213087359735e-01 ,  6.283239606600017e-01 ,  -2.090883319480902e-01 ,  -2.577748115891162e-01 ,  -2.941546155262131e-01 ,  1.566779656718113e-02 ,  4.987024384614033e-01 ,  -1.942415117861763e-01 ,  2.943427096224447e-01 ,  4.081531142244952e-01 ,  6.969576653942731e-02 ,  2.100553129327384e-01 ,  -2.552796365798094e-02 ,  1.826793632379830e-01 ,  8.513176813854215e-02 ,  4.271432729509511e-02 ,  8.892693970647939e-02 ,  -3.213108302034120e-01 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_random() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  5.885285628983279e-01 ,  8.294231938453709e-01 ,  4.789429532356768e-01 ,  8.075888612596384e-01 ,  9.623558468839565e-01 ,  4.353566829205651e-01 ,  8.588455784808138e-01 ,  7.182423791983076e-01 ,  8.886814943629995e-01 ,  4.623588619564345e-02 ,  9.130986448423635e-01 ,  7.668385355448595e-01 ,  9.623789273619899e-01 ,  9.813193590694200e-01 ,  2.854857307868702e-01 ,  6.700013166466804e-01 ,  1.412735310270223e-01 ,  5.951327636887873e-01 ,  9.195796756956715e-01 ,  1.919733210344334e-01 ,  3.498686863671552e-01 ,  7.974567705000712e-02 ,  1.946563156451762e-01 ,  2.077026664188026e-01 ,  9.600092980546204e-02 ,  9.996980377175202e-01 ,  8.875339549944073e-01 ,  4.637599726257671e-01 ,  7.437024470523893e-01 ,  6.952367933641160e-01 ,  5.224546098893470e-01 ,  4.234867948861591e-01 ,  6.640733237821220e-01 ,  5.555198729672033e-01 ,  2.658898278886870e-01 ,  3.643255465919335e-01 ,  6.272667630222782e-01 ,  6.271288917045859e-01 ,  2.095937611451607e-01 ,  6.097729907070338e-01 ,  8.749287603932815e-01 ,  8.713374496408887e-01 ,  6.522633075694795e-01 ,  7.017267325726095e-02 ,  4.235180899286221e-01 ,  8.902228492414066e-02 ,  5.524979791048534e-02 ,  2.546980854885439e-01 ,  4.568737627876636e-01 ,  7.593995049120491e-01 ,  6.288415398407439e-01 ,  2.824846019348571e-01 ,  6.950690619200575e-01 ,  5.065069608344968e-01 ,  5.075296156707131e-01 ;
z <<  2.636220634323303e-01 ,  4.416456866227010e-01 ,  3.415258701814652e-01 ,  7.265463939090130e-01 ,  4.825965308099226e-01 ,  4.467655781900614e-01 ,  4.770080937980686e-01 ,  4.799113726910161e-01 ,  6.896387006328037e-01 ,  7.198476893232635e-01 ,  8.010969737326715e-01 ,  4.052568816458992e-01 ,  7.935398606099887e-01 ,  9.647259459117272e-01 ,  9.923494116644874e-01 ,  7.206556019502786e-01 ,  6.548864838133828e-02 ,  8.472865278538246e-01 ,  8.364569716615516e-01 ,  1.631781899759521e-02 ,  3.276657287139964e-01 ,  3.220972200771334e-01 ,  7.404421224932046e-01 ,  6.103062881081006e-01 ,  2.823220462034699e-01 ,  1.863655614916040e-01 ,  1.685303919592733e-01 ,  9.545322921951538e-02 ,  7.905727387751030e-01 ,  9.357357476153892e-01 ,  2.198763383182067e-01 ,  7.449126919648740e-01 ,  9.511437223975017e-01 ,  1.917272252554406e-01 ,  5.718944518557192e-01 ,  4.393126809218142e-01 ,  9.748609274965017e-01 ,  8.695919110882055e-01 ,  1.604811394571537e-02 ,  2.013272742878226e-01 ,  8.479840747120673e-01 ,  5.742410733609326e-01 ,  5.228193173754018e-01 ,  8.098135781591498e-01 ,  7.640417052117675e-01 ,  9.547463494211380e-01 ,  3.266982426512590e-01 ,  4.765403015638958e-02 ,  6.922827853132590e-01 ,  5.013804909997255e-02 ,  5.651792240587357e-01 ,  8.597363526759456e-01 ,  3.970282399994222e-01 ,  6.011588397499769e-01 ,  1.714301613920506e-01 ,  1.577357062504808e-01 ,  6.060550718704039e-01 ,  8.644831653341858e-01 ,  9.998379659971401e-01 ,  3.113873096489617e-02 ,  9.209823275856519e-01 ,  5.111182541062665e-01 ,  3.493556684867074e-01 ,  3.974146652165286e-01 ,  5.778894564577020e-01 ,  3.476968859110544e-01 ,  1.455089742241399e-01 ,  8.655634034033419e-01 ,  7.064894398362059e-01 ,  6.098549399645308e-01 ,  7.225590306663150e-01 ,  9.860259041500742e-01 ,  1.750929009451389e-01 ,  8.241687672106883e-01 ,  8.223043071102077e-01 ,  3.433478247795110e-01 ,  5.587765910686205e-01 ,  4.583951040226183e-01 ,  1.943362585979126e-01 ,  4.328975725259948e-01 ,  1.525588709216097e-01 ,  9.322031204414301e-01 ,  1.874633777145578e-01 ,  6.338814511159659e-01 ,  5.700125055668297e-01 ,  9.746576540880918e-01 ,  7.935980998050621e-01 ,  3.601908650928504e-01 ,  3.761162382383360e-01 ,  4.989812229130441e-02 ,  5.183772866050185e-02 ,  3.109734427656744e-01 ,  9.498307423540859e-01 ,  4.954204395411921e-02 ,  1.767432399067472e-01 ,  6.361861121994160e-01 ,  3.604618149695636e-01 ,  1.855770297544811e-01 ,  9.473848480754395e-01 ,  4.276934560990486e-02 ;
g <<  1.901542784951112e+00 ,  1.705578134902462e+00 ,  9.737025195080641e-01 ,  1.491484345212421e+00 ,  1.899076985882573e+00 ,  1.705578134902462e+00 ,  2.102495915993846e+00 ,  1.498420504776956e+00 ,  1.236851733837826e+00 ,  2.207127188738190e+00 ,  9.737025195080641e-01 ,  1.498420504776956e+00 ,  1.451111383108529e+00 ,  5.405111652925707e-01 ,  1.640097457241883e+00 ,  1.491484345212421e+00 ,  1.236851733837826e+00 ,  5.405111652925707e-01 ,  1.360710787966147e+00 ,  1.439290005698094e+00 ,  1.899076985882573e+00 ,  2.207127188738190e+00 ,  1.640097457241883e+00 ,  1.439290005698094e+00 ,  2.682633976423498e+00 ;
w.d <<  9.693881604049188e-01 ,  6.133268205467090e-01 ,  4.426063286462090e-02 ,  4.055144158407464e-03 ,  1.339725270491339e-01 ,  9.410022713958340e-01 ,  3.028605620290723e-01 ,  3.661456016604264e-01 ,  8.981962445391883e-01 ,  3.143638049564507e-01 ,  5.489821840124055e-01 ,  4.360309576241223e-01 ,  6.499417612685054e-02 ,  5.845462257019302e-01 ,  8.440678976619022e-01 ,  1.564189183874064e-01 ,  2.242989686860415e-01 ,  4.128702077148407e-01 ,  3.692486905862902e-02 ,  4.966034986165482e-01 ,  8.179828644296319e-01 ,  6.578909387591091e-01 ,  5.334837356527721e-01 ,  8.551257407736000e-01 ,  1.496881349714015e-01 ,  5.672354768631239e-01 ,  3.741748177480889e-01 ,  6.013045471136395e-01 ,  1.129157018944362e-01 ,  7.755127010728279e-01 ,  9.660583318435267e-02 ,  1.663637457932475e-01 ,  8.074497520247557e-01 ,  9.476939242234907e-01 ,  4.332315025514858e-01 ,  4.140808317483012e-01 ,  2.454818761407551e-01 ,  2.747033919655770e-01 ,  6.172527709741663e-01 ,  1.784604107207253e-01 ,  1.194825043307771e-01 ,  4.557348586810382e-01 ,  1.649378065796322e-01 ,  6.487248312162270e-01 ,  8.210556743614970e-01 ,  7.775113893753993e-01 ,  4.801333902243475e-01 ,  3.475712562208170e-01 ,  4.347105489944344e-01 ,  5.008574909348362e-03 ,  7.125732007896374e-01 ,  3.316572226354955e-01 ,  3.194232377605339e-01 ,  7.992503242021254e-02 ,  4.480559260010161e-01 ,  5.828489673005941e-01 ,  3.905869418428840e-01 ,  8.695455453974028e-01 ,  6.733532167485129e-01 ,  2.414082418108049e-01 ,  5.253538488765902e-01 ,  9.105338176465975e-01 ,  5.201096943214129e-01 ,  6.021048687389493e-01 ,  6.277362381152096e-02 ,  4.893861165217643e-01 ,  4.614412627964344e-01 ,  4.011298800689024e-01 ,  4.204353581465221e-01 ,  5.849350493343958e-01 ,  5.386670484231432e-01 ,  4.898957587909363e-01 ,  1.657964405322077e-01 ,  4.413468174535875e-01 ,  9.686781985609425e-01 ,  4.151736932178327e-01 ,  3.531782978783116e-02 ,  2.830426682370324e-03 ,  5.354184513162129e-01 ,  5.057294182209637e-02 ,  9.274340534219172e-02 ,  1.087564126269691e-01 ,  4.540783303488197e-01 ,  9.926880657637538e-01 ,  4.850553508050713e-01 ,  4.586402838083844e-01 ,  4.365108145371187e-01 ,  5.011121848422556e-01 ,  4.470874692740242e-01 ,  7.262152005666610e-01 ,  8.979415356273188e-01 ,  6.978703473377672e-01 ,  4.233106026677405e-01 ,  6.495291182373754e-01 ,  9.095405975236686e-01 ,  1.536273415359948e-01 ,  2.373424569000443e-01 ,  6.191120001144675e-01 ,  6.870199456481508e-01 ,  6.426002227117794e-01 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  1.916314225353135e-01 ,  2.221787076077385e-01 ,  1.653896713317812e-01 ,  -6.483544014018283e-02 ,  -1.149221413372893e-01 ,  -7.382126130568167e-02 ,  1.318636017936666e-01 ,  1.607939674636689e-01 ,  4.069003370969570e-01 ,  -3.442971547080212e-01 ,  1.470516843491386e-01 ,  2.110555923497029e-01 ,  -2.765178525216014e-01 ,  -1.781325450737145e-01 ,  2.012389237779219e-01 ,  -3.845209738196022e-01 ,  3.594946934856500e-01 ,  2.470811125508889e-02 ,  -1.718646774147286e-01 ,  2.558792849409299e-01 ,  2.119190881437352e-01 ,  2.456661135850774e-01 ,  -3.296013128158349e-01 ,  7.001793944247617e-02 ,  8.326110759733751e-02 ,  1.797432727037013e-01 ,  -8.076149174741887e-02 ,  -5.400902727712141e-02 ,  -1.347435757705595e-01 ,  6.094244082512274e-02 ,  -3.675162970585139e-02 ,  1.724836726452127e-01 ,  -2.465085462878327e-01 ,  3.040605518644618e-01 ,  -2.470321751188647e-02 ,  2.373861924815819e-01 ,  -1.860052923453456e-01 ,  -2.643591590131702e-01 ,  2.973434240317328e-02 ,  1.578136903987200e-01 ,  -5.413930897845349e-01 ,  1.575873766379907e-01 ,  6.782258918645361e-02 ,  -2.103641988449516e-01 ,  8.884502029387149e-02 ,  2.988220446241003e-01 ,  -2.146759109067942e-01 ,  2.225117432376691e-01 ,  1.575291072822295e-02 ,  3.207675407179076e-01 ,  -2.765050268763742e-01 ,  -6.455853015061780e-01 ,  -5.124182600629289e-01 ,  -6.616931196669744e-01 ,  -3.709596236508291e-01 ;
s_z <<  -1.843930701780025e-01 ,  -2.973796695862738e-02 ,  1.243253472337317e-01 ,  -4.397895897653117e-03 ,  2.452170046020562e-02 ,  -1.024857143702242e-01 ,  1.212228019008836e-01 ,  -3.503717633367439e-01 ,  -4.841324161691182e-01 ,  -1.460381536305907e-02 ,  -1.223434294891897e+00 ,  6.713474582189646e-02 ,  -7.083323921936842e-02 ,  -2.136704946149638e-01 ,  -9.746001643591605e-01 ,  -3.812173224891939e-01 ,  9.835174942242595e-01 ,  -8.709186866162461e-01 ,  -7.851550063028284e-02 ,  1.988760046746430e-01 ,  -3.216201725262294e-01 ,  1.182900740216188e-01 ,  1.904040247098998e-01 ,  -2.178756526115966e-02 ,  3.591780905713720e-02 ,  -1.579658025172360e-01 ,  1.490790867892860e+00 ,  7.832537777758203e-01 ,  5.193216323373865e-02 ,  -8.068450251350849e-01 ,  9.666115925508814e-01 ,  -1.633835916640862e+00 ,  -2.380543378269077e-01 ,  1.750621569965216e-01 ,  -4.067839241954985e-01 ,  -9.664631053732927e-01 ,  -5.836289664122927e-01 ,  -3.378716634985535e-01 ,  9.978256757698099e-01 ,  6.622566269211094e-02 ,  -2.518022050146309e-01 ,  -1.892397451060602e-01 ,  -4.742614693445731e-01 ,  9.594783081770335e-02 ,  -5.869603206013851e-01 ,  -1.256654732676993e+00 ,  1.111280699541428e+00 ,  6.969865382509227e-01 ,  -1.066055941860798e-01 ,  1.078826491078396e-02 ,  -1.361863939585575e-01 ,  2.420467847549223e-02 ,  8.790208669971115e-01 ,  -5.381493248033883e-02 ,  1.888320542406974e-01 ,  7.711785014972970e-02 ,  4.388109613208401e-01 ,  -2.199665547365594e-01 ,  1.021090997363876e-01 ,  -1.854229163226696e-02 ,  -9.468391969028669e-01 ,  3.794726050292874e-01 ,  -2.181371779532092e-01 ,  1.430745935623458e-01 ,  -9.065764700853580e-02 ,  -9.311928096636477e-01 ,  1.862796178127857e+00 ,  -8.187797728479086e-01 ,  -5.153253487982287e-01 ,  2.903564873835165e-02 ,  -4.346560947650248e-01 ,  -1.934584804177996e-01 ,  4.658752791772910e-02 ,  -2.094899168746377e-01 ,  -3.799854032111618e-01 ,  2.719355215536911e-01 ,  1.712228278597901e-01 ,  4.991743216240536e-03 ,  6.212211859356767e-01 ,  -1.968459840726650e-02 ,  9.401695562847263e-01 ,  -1.049447508732442e+00 ,  1.727594796260938e-01 ,  3.343167223030398e-01 ,  -4.613001362762150e-01 ,  -1.004635770116181e+00 ,  -7.652000351890937e-01 ,  -2.237657902459315e-01 ,  7.052562317253354e-01 ,  6.594122394912442e-01 ,  -3.527242910613257e-01 ,  7.052875039842794e-01 ,  -8.730938719122974e-01 ,  6.185817780705976e-01 ,  3.112136003699260e-01 ,  -3.961471967845341e-01 ,  2.968182623115427e-01 ,  8.873240600158699e-01 ,  -3.929126357831931e-01 ,  1.009893547842582e+00 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }

