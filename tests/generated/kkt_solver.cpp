

// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_simple() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 2;
int r = 2;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;
z <<  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ;
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
w.d.diagonal() <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  3.333333333333334e-01 ,  3.333333333333334e-01 ,  3.333333333333334e-01 ,  3.333333333333334e-01 ,  2.500000000000002e-01 ,  2.500000000000002e-01 ;
s_z <<  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  -5.833333333333335e-01 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ,  8.333333333333318e-02 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_diagonal_g() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  2.398417729473971e-01 ,  4.547977071585122e-01 ,  5.629544276573709e-01 ,  8.900007042982813e-01 ,  1.466526265481916e-02 ,  1.281985152513252e-01 ,  3.914695865570599e-01 ,  6.658548534011068e-01 ,  8.708950476859341e-01 ,  3.377413693214281e-01 ,  6.639096375812369e-01 ,  5.443764653038029e-01 ,  1.384391594713650e-01 ,  6.087655529843178e-01 ,  4.822335663897885e-01 ,  7.024959865331473e-01 ,  7.046480597244335e-01 ,  5.501537101542628e-01 ,  5.669461344079800e-01 ,  6.727812531685051e-01 ,  6.543545463249629e-01 ,  3.187764070599849e-01 ,  1.215141292071139e-01 ,  6.199246835549060e-01 ,  1.407779181864407e-01 ,  9.838938358459044e-01 ,  7.794199421921031e-01 ,  3.437512692601546e-01 ,  9.960086172235597e-01 ,  4.699585779742207e-01 ,  1.955843506068640e-01 ,  4.388263616607884e-01 ,  6.239038043402809e-01 ,  6.244044251408213e-01 ,  5.911968905235768e-01 ,  8.115229657025324e-01 ,  2.416739029028495e-01 ,  6.541707472389746e-01 ,  2.926786885149555e-01 ,  1.043732492809588e-01 ,  1.408045826547436e-01 ,  4.086092651288791e-01 ,  1.004824931009043e-01 ,  5.861489818046940e-01 ,  5.590018922780994e-01 ,  5.926319568846149e-01 ,  9.813294174815161e-01 ,  4.461514944182435e-01 ,  7.517010047596728e-01 ,  8.913004186249485e-01 ,  5.608133340569914e-01 ,  2.242167737523741e-01 ,  9.757613908116658e-02 ,  3.579599236431296e-01 ,  5.515963571366392e-01 ;
z <<  1.880616928658732e-01 ,  2.911663433384893e-01 ,  9.078191674017190e-01 ,  7.913493587207618e-01 ,  5.566567990479381e-01 ,  6.504221802914270e-01 ,  3.621058043443570e-02 ,  4.047835779494702e-02 ,  8.224852436183271e-01 ,  9.560269184007876e-01 ,  3.929676474578060e-01 ,  5.555557373769898e-01 ,  2.346153125371528e-01 ,  8.332633408514946e-01 ,  9.437189945715868e-01 ,  8.439451425096011e-01 ,  1.108596750135390e-01 ,  2.040614673854764e-01 ,  8.034985649926250e-01 ,  1.840741892646596e-01 ,  2.009597331098566e-01 ,  3.161276584572281e-01 ,  7.159717236449706e-01 ,  9.235419920330333e-01 ,  2.109496157515279e-01 ,  9.330641724450119e-01 ,  4.289118795309399e-02 ,  5.654328944097979e-01 ,  5.830259735042242e-01 ,  7.793609950411137e-01 ,  5.326972956960271e-01 ,  9.006961285946016e-01 ,  4.144457968461149e-01 ,  5.817193294352418e-02 ,  2.070159653597581e-01 ,  7.498930701971750e-01 ,  8.599048825012843e-01 ,  4.912999515829717e-01 ,  6.577679795924141e-02 ,  6.332979433049277e-01 ,  4.028694607604661e-01 ,  1.564369982751805e-01 ,  9.108415597622606e-01 ,  4.136596217127986e-02 ,  8.930813399714489e-01 ,  4.528449141393991e-01 ,  9.363687772542193e-01 ,  2.902325246358377e-01 ,  1.701625402512211e-01 ,  7.085771418130146e-01 ,  6.229928154482058e-01 ,  8.930479621258511e-01 ,  1.284654502142611e-01 ,  1.913960707793910e-01 ,  1.191662558540891e-01 ,  1.013369991234043e-01 ,  6.671234505294764e-01 ,  4.045024752959462e-01 ,  5.989532352745899e-01 ,  3.558362041696228e-01 ,  5.681548404220726e-01 ,  2.190618724525224e-01 ,  2.969339929711398e-01 ,  2.415507444508683e-01 ,  3.400790776953548e-01 ,  7.905485221848512e-01 ,  8.383112416027101e-01 ,  5.751580637264095e-01 ,  6.697112951655859e-02 ,  1.070969355616090e-01 ,  5.984115919713300e-01 ,  9.198502007574207e-01 ,  4.929378983348892e-01 ,  3.665062176907155e-01 ,  5.457540642855180e-01 ,  5.702195109653654e-01 ,  2.755332658546767e-01 ,  1.161875710714823e-01 ,  1.727907444164493e-01 ,  4.447108514907849e-01 ,  7.451294399095560e-01 ,  2.821354100020020e-01 ,  5.493560973332475e-01 ,  2.388936541474319e-01 ,  8.418113482270400e-01 ,  5.050512616656306e-01 ,  2.269903094006344e-01 ,  5.784147501637659e-01 ,  2.855591176397962e-01 ,  9.847900563641043e-01 ,  4.301510900792094e-02 ,  6.257615062804315e-01 ,  1.684771143091472e-01 ,  7.588421705924975e-02 ,  9.707778887949882e-01 ,  2.835331305144229e-02 ,  8.989051496320776e-01 ,  8.777679112601062e-01 ,  8.856767992983698e-01 ,  5.582714506638351e-01 ;
g <<  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  0.000000000000000e+00 ,  1.000000000000000e+00 ;
w.d.diagonal() <<  4.508591897959457e-02 ,  1.014596272322456e-01 ,  4.411603461490006e-01 ,  2.060476474596330e-01 ,  8.276860826025996e-01 ,  8.200461800732343e-01 ,  2.396724157952335e-03 ,  3.871048150679738e-01 ,  2.001130240126824e-01 ,  9.341048132158136e-02 ,  8.670548895831770e-01 ,  1.777547893040484e-01 ,  2.091435872097817e-01 ,  6.405767171690279e-01 ,  7.800047772114201e-01 ,  2.967667899179864e-01 ,  7.520749762716832e-01 ,  8.067012786839564e-01 ,  1.641107008576754e-01 ,  6.101069125491921e-01 ,  2.023465078688563e-01 ,  9.772895814445376e-01 ,  8.097477963149035e-01 ,  6.227713905256282e-02 ,  2.134899891791220e-02 ,  5.735984905693097e-01 ,  2.886891662335506e-01 ,  1.476114425914473e-01 ,  8.147152552757092e-01 ,  4.609255112755443e-01 ,  2.779643960815397e-01 ,  9.728722092001731e-01 ,  2.908481031690473e-01 ,  5.280549986070434e-01 ,  8.771079914954966e-01 ,  3.928442393081003e-01 ,  9.123775363599005e-01 ,  8.659589879439599e-01 ,  6.158357771854636e-01 ,  9.122810384018532e-02 ,  2.085138097923178e-02 ,  7.045776119330116e-01 ,  6.771019871555528e-02 ,  9.335986867570968e-01 ,  4.905432950905785e-01 ,  9.578664053871986e-01 ,  4.818588847160532e-02 ,  4.093433046190663e-01 ,  2.163461711558085e-01 ,  1.387647883677834e-01 ,  7.537720618874499e-02 ,  9.069008993254356e-01 ,  4.559055050191562e-01 ,  2.762761686496019e-01 ,  5.205859019187458e-01 ,  1.677533183691586e-01 ,  3.410234186763251e-01 ,  3.750749899160243e-01 ,  6.589098678128191e-02 ,  4.718303158549234e-01 ,  6.001749470148278e-01 ,  7.970130529304398e-03 ,  9.421251602615325e-01 ,  6.479337539395669e-02 ,  6.486855706998961e-01 ,  8.138521528035636e-01 ,  7.834810280682356e-01 ,  3.861852325542348e-02 ,  1.220051535143085e-02 ,  4.423931860817615e-01 ,  5.527930860665738e-01 ,  1.634963213712569e-01 ,  4.368038165513524e-01 ,  6.773593714434317e-01 ,  4.456720916939136e-01 ,  9.888214332657759e-01 ,  3.804882827452959e-01 ,  2.260036900425021e-01 ,  5.237027875913325e-01 ,  4.825658724762065e-01 ,  4.726873799665249e-01 ,  1.851727372975076e-01 ,  1.972135456446832e-01 ,  3.081375706843982e-01 ,  3.698844452791760e-01 ,  3.785899928528595e-01 ,  3.669649578567497e-01 ,  6.514393398633094e-01 ,  3.205255518607202e-01 ,  4.057497978441204e-01 ,  4.049841940603887e-01 ,  4.602555177095331e-01 ,  6.668921647139261e-01 ,  3.568261539502273e-01 ,  7.457216510164405e-01 ,  8.372530410110991e-01 ,  5.507811981000308e-01 ,  8.072353184026870e-01 ,  2.754083342577843e-01 ,  6.776308985943154e-01 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  2.215289419852567e-01 ,  1.301162814445060e-01 ,  -3.059646231688967e-01 ,  -2.660141340093131e-01 ,  -2.736075517200427e-01 ,  -2.981399680607445e-01 ,  3.773510690964237e-01 ,  2.092885662955153e-01 ,  6.100245569976770e-02 ,  -3.517043328455414e-01 ,  2.192883135032854e-01 ,  -1.943536071886590e-01 ,  1.590972151618583e-01 ,  -2.554945473601732e-01 ,  -1.386231040898209e-01 ,  -2.603985246309075e-01 ,  4.393323624854423e-01 ,  1.678844589967218e-01 ,  -4.320470699961363e-01 ,  -8.110978599853391e-02 ,  2.251985420639080e-01 ,  4.906813423799796e-01 ,  1.252485456905261e-02 ,  -4.172430798286354e-01 ,  3.818048996767139e-01 ,  -8.570407570778360e-02 ,  2.146880644536688e-01 ,  -1.895009881204478e-01 ,  -5.231117308558597e-02 ,  -1.043546423252860e-01 ,  7.701312825784123e-03 ,  -1.252040102593222e-01 ,  1.085620544735600e-01 ,  -3.573164731886613e-02 ,  3.024668404072380e-01 ,  -5.047920671906780e-02 ,  -1.745072048734616e-01 ,  2.014370888537548e-01 ,  -4.852459846687829e-02 ,  -1.776939354579854e-02 ,  1.023641898155281e-02 ,  2.492893889348119e-01 ,  -4.975135036606924e-01 ,  -2.217530180786343e-01 ,  -9.649160521211231e-04 ,  3.717027316896271e-05 ,  -5.117032240680950e-01 ,  2.198828820066058e-01 ,  3.623852620438409e-01 ,  -9.334396442661597e-02 ,  -4.140598498901998e-01 ,  -4.135676830836855e-01 ,  -4.079261748651692e-01 ,  -4.998766970156565e-01 ,  -5.938508620663095e-01 ;
s_z <<  9.912662623319539e-02 ,  -7.603952340225016e-02 ,  -4.395870369141351e-01 ,  -1.235565074858713e-01 ,  3.755066338207848e-01 ,  7.533433989534627e-02 ,  2.517416452044368e-03 ,  4.085695775882685e-01 ,  -1.916971692347840e+00 ,  -1.121043735219138e-01 ,  -2.285854257348933e-01 ,  2.945943290775921e-01 ,  6.796119047102872e-02 ,  -1.215968273400602e-01 ,  -2.708253008022259e-01 ,  -5.711109657361986e-01 ,  -1.816632100865713e-01 ,  4.460170007622760e-02 ,  7.825522732399154e-01 ,  8.045908818654869e-01 ,  -5.979063049314337e-02 ,  -4.023795251887061e-01 ,  -3.958891951392076e-01 ,  -1.031231570114551e-01 ,  5.135353850937464e-02 ,  -7.554068812436513e-01 ,  5.403335106476685e-01 ,  2.167465341042119e-01 ,  -3.785138820377904e-02 ,  -1.760707287061029e-01 ,  -4.545141766809249e-01 ,  -3.720164188358744e-01 ,  -3.956762144933705e-01 ,  9.041414486188526e-01 ,  9.618890389479097e-02 ,  -7.263795291754549e-01 ,  -2.979358694303821e-01 ,  -3.288964830168014e-01 ,  7.836902554265659e-01 ,  -2.376207197158819e-01 ,  4.575093367343512e-02 ,  1.112907327864181e-02 ,  -7.977943262419955e-02 ,  7.286468614110226e-01 ,  -6.080310644098061e-01 ,  -4.052990511414293e-02 ,  -2.303136966952258e-01 ,  -2.496418791370516e-01 ,  -1.510130967646129e-01 ,  -1.540903536956162e-01 ,  1.671059072647265e-01 ,  -3.852284167515119e-01 ,  -5.813463146683207e-02 ,  1.537102980489508e-01 ,  3.862514404463498e-01 ,  8.693051707007092e-02 ,  3.630111448977361e-01 ,  5.671193003627422e-01 ,  -5.778344568665814e-01 ,  -2.409545786451991e-01 ,  1.086238659172189e-01 ,  1.909673147068072e-02 ,  2.866810148461712e-01 ,  4.369899217936188e-02 ,  1.775107779211040e-01 ,  -7.825588403638248e-01 ,  1.862049423505252e-02 ,  1.689785316661015e-02 ,  7.036567540234738e-02 ,  9.169312576871315e-01 ,  7.389166220117761e-02 ,  -9.542217930597699e-02 ,  -1.659483414613104e-01 ,  -4.190871381889507e-01 ,  9.646143554188720e-01 ,  -2.445979917568605e-01 ,  9.270258709091316e-01 ,  4.523714442627586e-01 ,  5.246769465891020e-01 ,  9.280674578256011e-02 ,  -6.841060093808146e-01 ,  3.363488013008430e-02 ,  -1.666613106471697e-01 ,  7.310091886849664e-01 ,  1.473604931004005e-01 ,  -3.736776490800737e-01 ,  3.289188395558286e-02 ,  4.750789776013809e-02 ,  5.172535541909770e-01 ,  -1.007292153970732e+00 ,  9.414717054537142e-01 ,  8.059776430855731e-02 ,  -3.869657746172065e-01 ,  5.667730900296676e-01 ,  -5.067466423506971e-01 ,  4.607253580662872e-01 ,  -1.810230076945018e+00 ,  -3.096480650560932e-01 ,  -8.501863352092982e-02 ,  -8.524486286556460e-02 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_diagonal_d() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  9.693881604049188e-01 ,  6.133268205467090e-01 ,  4.426063286462090e-02 ,  4.055144158407464e-03 ,  1.339725270491339e-01 ,  9.410022713958340e-01 ,  3.028605620290723e-01 ,  3.661456016604264e-01 ,  8.981962445391883e-01 ,  3.143638049564507e-01 ,  5.489821840124055e-01 ,  4.360309576241223e-01 ,  6.499417612685054e-02 ,  5.845462257019302e-01 ,  8.440678976619022e-01 ,  1.564189183874064e-01 ,  2.242989686860415e-01 ,  4.128702077148407e-01 ,  3.692486905862902e-02 ,  4.966034986165482e-01 ,  8.179828644296319e-01 ,  6.578909387591091e-01 ,  5.334837356527721e-01 ,  8.551257407736000e-01 ,  1.496881349714015e-01 ,  5.672354768631239e-01 ,  3.741748177480889e-01 ,  6.013045471136395e-01 ,  1.129157018944362e-01 ,  7.755127010728279e-01 ,  9.660583318435267e-02 ,  1.663637457932475e-01 ,  8.074497520247557e-01 ,  9.476939242234907e-01 ,  4.332315025514858e-01 ,  4.140808317483012e-01 ,  2.454818761407551e-01 ,  2.747033919655770e-01 ,  6.172527709741663e-01 ,  1.784604107207253e-01 ,  1.194825043307771e-01 ,  4.557348586810382e-01 ,  1.649378065796322e-01 ,  6.487248312162270e-01 ,  8.210556743614970e-01 ,  7.775113893753993e-01 ,  4.801333902243475e-01 ,  3.475712562208170e-01 ,  4.347105489944344e-01 ,  5.008574909348362e-03 ,  7.125732007896374e-01 ,  3.316572226354955e-01 ,  3.194232377605339e-01 ,  7.992503242021254e-02 ,  4.480559260010161e-01 ;
z <<  5.828489673005941e-01 ,  3.905869418428840e-01 ,  8.695455453974028e-01 ,  6.733532167485129e-01 ,  2.414082418108049e-01 ,  5.253538488765902e-01 ,  9.105338176465975e-01 ,  5.201096943214129e-01 ,  6.021048687389493e-01 ,  6.277362381152096e-02 ,  4.893861165217643e-01 ,  4.614412627964344e-01 ,  4.011298800689024e-01 ,  4.204353581465221e-01 ,  5.849350493343958e-01 ,  5.386670484231432e-01 ,  4.898957587909363e-01 ,  1.657964405322077e-01 ,  4.413468174535875e-01 ,  9.686781985609425e-01 ,  4.151736932178327e-01 ,  3.531782978783116e-02 ,  2.830426682370324e-03 ,  5.354184513162129e-01 ,  5.057294182209637e-02 ,  9.274340534219172e-02 ,  1.087564126269691e-01 ,  4.540783303488197e-01 ,  9.926880657637538e-01 ,  4.850553508050713e-01 ,  4.586402838083844e-01 ,  4.365108145371187e-01 ,  5.011121848422556e-01 ,  4.470874692740242e-01 ,  7.262152005666610e-01 ,  8.979415356273188e-01 ,  6.978703473377672e-01 ,  4.233106026677405e-01 ,  6.495291182373754e-01 ,  9.095405975236686e-01 ,  1.536273415359948e-01 ,  2.373424569000443e-01 ,  6.191120001144675e-01 ,  6.870199456481508e-01 ,  6.426002227117794e-01 ,  5.885285628983279e-01 ,  8.294231938453709e-01 ,  4.789429532356768e-01 ,  8.075888612596384e-01 ,  9.623558468839565e-01 ,  4.353566829205651e-01 ,  8.588455784808138e-01 ,  7.182423791983076e-01 ,  8.886814943629995e-01 ,  4.623588619564345e-02 ,  9.130986448423635e-01 ,  7.668385355448595e-01 ,  9.623789273619899e-01 ,  9.813193590694200e-01 ,  2.854857307868702e-01 ,  6.700013166466804e-01 ,  1.412735310270223e-01 ,  5.951327636887873e-01 ,  9.195796756956715e-01 ,  1.919733210344334e-01 ,  3.498686863671552e-01 ,  7.974567705000712e-02 ,  1.946563156451762e-01 ,  2.077026664188026e-01 ,  9.600092980546204e-02 ,  9.996980377175202e-01 ,  8.875339549944073e-01 ,  4.637599726257671e-01 ,  7.437024470523893e-01 ,  6.952367933641160e-01 ,  5.224546098893470e-01 ,  4.234867948861591e-01 ,  6.640733237821220e-01 ,  5.555198729672033e-01 ,  2.658898278886870e-01 ,  3.643255465919335e-01 ,  6.272667630222782e-01 ,  6.271288917045859e-01 ,  2.095937611451607e-01 ,  6.097729907070338e-01 ,  8.749287603932815e-01 ,  8.713374496408887e-01 ,  6.522633075694795e-01 ,  7.017267325726095e-02 ,  4.235180899286221e-01 ,  8.902228492414066e-02 ,  5.524979791048534e-02 ,  2.546980854885439e-01 ,  4.568737627876636e-01 ,  7.593995049120491e-01 ,  6.288415398407439e-01 ,  2.824846019348571e-01 ,  6.950690619200575e-01 ,  5.065069608344968e-01 ,  5.075296156707131e-01 ;
g <<  1.901542784951112e+00 ,  1.705578134902462e+00 ,  9.737025195080641e-01 ,  1.491484345212421e+00 ,  1.899076985882573e+00 ,  1.705578134902462e+00 ,  2.102495915993846e+00 ,  1.498420504776956e+00 ,  1.236851733837826e+00 ,  2.207127188738190e+00 ,  9.737025195080641e-01 ,  1.498420504776956e+00 ,  1.451111383108529e+00 ,  5.405111652925707e-01 ,  1.640097457241883e+00 ,  1.491484345212421e+00 ,  1.236851733837826e+00 ,  5.405111652925707e-01 ,  1.360710787966147e+00 ,  1.439290005698094e+00 ,  1.899076985882573e+00 ,  2.207127188738190e+00 ,  1.640097457241883e+00 ,  1.439290005698094e+00 ,  2.682633976423498e+00 ;
w.d.diagonal() <<  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ,  1.000000000000000e+00 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  2.076371594295575e-01 ,  3.495031279755610e-01 ,  -1.395512019185771e-01 ,  -4.810776549138022e-02 ,  -1.983494851280507e-01 ,  2.940282376455126e-01 ,  -2.246871049544440e-01 ,  2.365798467829285e-01 ,  3.297401036000611e-01 ,  -8.285912838007103e-02 ,  1.125019468851556e-01 ,  -1.308312253779721e-01 ,  5.206893300271351e-02 ,  3.132203317179372e-01 ,  -2.134600282539837e-03 ,  4.203770502170799e-02 ,  -5.771152436641663e-02 ,  2.097995063475935e-01 ,  -3.244817743051857e-02 ,  -1.336681953610273e-01 ,  2.181438781269179e-01 ,  2.449243000384934e-01 ,  1.617333075837322e-01 ,  1.639854346660682e-01 ,  -1.413264630318153e-01 ,  2.909735267332807e-01 ,  7.286276123769003e-02 ,  1.682022112762752e-01 ,  -2.762566356536453e-01 ,  -7.539759850638159e-03 ,  -1.398227098876807e-01 ,  -1.237463540278320e-02 ,  3.008528079687820e-01 ,  2.521027311172826e-01 ,  -5.267144314723136e-02 ,  1.232572631593528e-01 ,  1.141786192162639e-01 ,  1.707337116648823e-01 ,  -1.693987896921493e-02 ,  -2.240795237637296e-01 ,  -1.105316910982257e-01 ,  3.986972365689961e-04 ,  -1.728035404438059e-01 ,  8.111408503252358e-02 ,  2.805154393478925e-01 ,  3.176242174339149e-01 ,  -9.538784482501252e-02 ,  2.405859967433750e-01 ,  9.618909853097282e-03 ,  -2.671373164388740e-01 ,  -4.938966856448117e-01 ,  -4.630042148984120e-01 ,  -4.971973924717768e-01 ,  -5.858149906878793e-01 ,  -4.533561019061757e-01 ;
s_z <<  -2.965894410853402e-01 ,  -2.770858549200328e-01 ,  -2.327969510070496e-01 ,  -3.943046056925317e-02 ,  4.102973452234213e-01 ,  -3.254854008772913e-01 ,  -2.228424977937427e-01 ,  -2.594921486325631e-01 ,  -3.460299816511301e-01 ,  4.734416064747262e-01 ,  -1.079913777621085e-01 ,  1.323941774799497e-01 ,  4.399857940016123e-02 ,  -1.478406991765791e-01 ,  -1.294443471456805e-01 ,  -8.680806780003854e-02 ,  3.081998047389243e-02 ,  1.216014455919757e-01 ,  1.769163506648096e-01 ,  -3.816539012937399e-01 ,  -1.394208856999388e-01 ,  1.827620850720875e-01 ,  3.326336582056753e-01 ,  -1.135888952944021e-01 ,  5.441096231158952e-01 ,  1.101797535693390e-01 ,  2.813850410337533e-01 ,  -1.250831491533188e-01 ,  -1.306164394222296e-01 ,  -2.415948904825771e-02 ,  1.750791117241079e-01 ,  3.886803576407621e-02 ,  -3.047676003392596e-01 ,  -1.133752097034280e-01 ,  -2.201876555132538e-01 ,  -5.273021131418597e-01 ,  -3.490447516556191e-01 ,  -9.684692186084581e-02 ,  -4.677424858028065e-02 ,  -2.321049718537634e-01 ,  4.508010352070416e-01 ,  2.252630607617994e-01 ,  5.088893280111486e-02 ,  -1.823190399927943e-01 ,  -4.697595601534969e-01 ,  -4.122560946874312e-01 ,  -2.710311341219463e-01 ,  -2.223315575072757e-01 ,  -2.313927804248558e-01 ,  -2.418624285389065e-01 ,  2.661771621538055e-01 ,  -4.633823560684119e-02 ,  -3.605961886451075e-01 ,  -3.509742691665009e-01 ,  2.087707305824818e-01 ,  -1.251737215520381e-01 ,  -5.285214256008900e-01 ,  -2.286016881072855e-01 ,  -6.576426478148054e-02 ,  8.501124273923422e-02 ,  -6.360268411671254e-02 ,  1.908994584934180e-01 ,  -4.586643821429742e-02 ,  -2.054435328985561e-02 ,  2.592481805892024e-01 ,  1.860657042993631e-01 ,  3.255470134819881e-01 ,  5.123405831741948e-01 ,  3.456641468385592e-01 ,  2.236869767396860e-01 ,  -2.876574739457898e-01 ,  -1.796054400575020e-01 ,  1.951707274297427e-01 ,  6.097978301558825e-03 ,  -3.832071544897558e-01 ,  2.624156024887456e-01 ,  1.123801812499428e-01 ,  1.326279965930228e-03 ,  -2.459615179329688e-01 ,  1.799265141668505e-01 ,  -1.025157083480333e-02 ,  -1.766371835266502e-01 ,  1.709213087359735e-01 ,  6.283239606600017e-01 ,  -2.090883319480902e-01 ,  -2.577748115891162e-01 ,  -2.941546155262131e-01 ,  1.566779656718113e-02 ,  4.987024384614033e-01 ,  -1.942415117861763e-01 ,  2.943427096224447e-01 ,  4.081531142244952e-01 ,  6.969576653942731e-02 ,  2.100553129327384e-01 ,  -2.552796365798094e-02 ,  1.826793632379830e-01 ,  8.513176813854215e-02 ,  4.271432729509511e-02 ,  8.892693970647939e-02 ,  -3.213108302034120e-01 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }



// ------- Generated from kkt_test.py ---
template <typename Scalar> int kkt_test_random() {

typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;

// Problem
int n = 5;
int r = 10;
Matrix g(n,n);
cvxopt::ScalingMatrix<Scalar> w;
w.d.resize(2*r*n);
Vector x(n*(r+1)), y, z(2*n*r);
x <<  5.885285628983279e-01 ,  8.294231938453709e-01 ,  4.789429532356768e-01 ,  8.075888612596384e-01 ,  9.623558468839565e-01 ,  4.353566829205651e-01 ,  8.588455784808138e-01 ,  7.182423791983076e-01 ,  8.886814943629995e-01 ,  4.623588619564345e-02 ,  9.130986448423635e-01 ,  7.668385355448595e-01 ,  9.623789273619899e-01 ,  9.813193590694200e-01 ,  2.854857307868702e-01 ,  6.700013166466804e-01 ,  1.412735310270223e-01 ,  5.951327636887873e-01 ,  9.195796756956715e-01 ,  1.919733210344334e-01 ,  3.498686863671552e-01 ,  7.974567705000712e-02 ,  1.946563156451762e-01 ,  2.077026664188026e-01 ,  9.600092980546204e-02 ,  9.996980377175202e-01 ,  8.875339549944073e-01 ,  4.637599726257671e-01 ,  7.437024470523893e-01 ,  6.952367933641160e-01 ,  5.224546098893470e-01 ,  4.234867948861591e-01 ,  6.640733237821220e-01 ,  5.555198729672033e-01 ,  2.658898278886870e-01 ,  3.643255465919335e-01 ,  6.272667630222782e-01 ,  6.271288917045859e-01 ,  2.095937611451607e-01 ,  6.097729907070338e-01 ,  8.749287603932815e-01 ,  8.713374496408887e-01 ,  6.522633075694795e-01 ,  7.017267325726095e-02 ,  4.235180899286221e-01 ,  8.902228492414066e-02 ,  5.524979791048534e-02 ,  2.546980854885439e-01 ,  4.568737627876636e-01 ,  7.593995049120491e-01 ,  6.288415398407439e-01 ,  2.824846019348571e-01 ,  6.950690619200575e-01 ,  5.065069608344968e-01 ,  5.075296156707131e-01 ;
z <<  2.636220634323303e-01 ,  4.416456866227010e-01 ,  3.415258701814652e-01 ,  7.265463939090130e-01 ,  4.825965308099226e-01 ,  4.467655781900614e-01 ,  4.770080937980686e-01 ,  4.799113726910161e-01 ,  6.896387006328037e-01 ,  7.198476893232635e-01 ,  8.010969737326715e-01 ,  4.052568816458992e-01 ,  7.935398606099887e-01 ,  9.647259459117272e-01 ,  9.923494116644874e-01 ,  7.206556019502786e-01 ,  6.548864838133828e-02 ,  8.472865278538246e-01 ,  8.364569716615516e-01 ,  1.631781899759521e-02 ,  3.276657287139964e-01 ,  3.220972200771334e-01 ,  7.404421224932046e-01 ,  6.103062881081006e-01 ,  2.823220462034699e-01 ,  1.863655614916040e-01 ,  1.685303919592733e-01 ,  9.545322921951538e-02 ,  7.905727387751030e-01 ,  9.357357476153892e-01 ,  2.198763383182067e-01 ,  7.449126919648740e-01 ,  9.511437223975017e-01 ,  1.917272252554406e-01 ,  5.718944518557192e-01 ,  4.393126809218142e-01 ,  9.748609274965017e-01 ,  8.695919110882055e-01 ,  1.604811394571537e-02 ,  2.013272742878226e-01 ,  8.479840747120673e-01 ,  5.742410733609326e-01 ,  5.228193173754018e-01 ,  8.098135781591498e-01 ,  7.640417052117675e-01 ,  9.547463494211380e-01 ,  3.266982426512590e-01 ,  4.765403015638958e-02 ,  6.922827853132590e-01 ,  5.013804909997255e-02 ,  5.651792240587357e-01 ,  8.597363526759456e-01 ,  3.970282399994222e-01 ,  6.011588397499769e-01 ,  1.714301613920506e-01 ,  1.577357062504808e-01 ,  6.060550718704039e-01 ,  8.644831653341858e-01 ,  9.998379659971401e-01 ,  3.113873096489617e-02 ,  9.209823275856519e-01 ,  5.111182541062665e-01 ,  3.493556684867074e-01 ,  3.974146652165286e-01 ,  5.778894564577020e-01 ,  3.476968859110544e-01 ,  1.455089742241399e-01 ,  8.655634034033419e-01 ,  7.064894398362059e-01 ,  6.098549399645308e-01 ,  7.225590306663150e-01 ,  9.860259041500742e-01 ,  1.750929009451389e-01 ,  8.241687672106883e-01 ,  8.223043071102077e-01 ,  3.433478247795110e-01 ,  5.587765910686205e-01 ,  4.583951040226183e-01 ,  1.943362585979126e-01 ,  4.328975725259948e-01 ,  1.525588709216097e-01 ,  9.322031204414301e-01 ,  1.874633777145578e-01 ,  6.338814511159659e-01 ,  5.700125055668297e-01 ,  9.746576540880918e-01 ,  7.935980998050621e-01 ,  3.601908650928504e-01 ,  3.761162382383360e-01 ,  4.989812229130441e-02 ,  5.183772866050185e-02 ,  3.109734427656744e-01 ,  9.498307423540859e-01 ,  4.954204395411921e-02 ,  1.767432399067472e-01 ,  6.361861121994160e-01 ,  3.604618149695636e-01 ,  1.855770297544811e-01 ,  9.473848480754395e-01 ,  4.276934560990486e-02 ;
g <<  1.901542784951112e+00 ,  1.705578134902462e+00 ,  9.737025195080641e-01 ,  1.491484345212421e+00 ,  1.899076985882573e+00 ,  1.705578134902462e+00 ,  2.102495915993846e+00 ,  1.498420504776956e+00 ,  1.236851733837826e+00 ,  2.207127188738190e+00 ,  9.737025195080641e-01 ,  1.498420504776956e+00 ,  1.451111383108529e+00 ,  5.405111652925707e-01 ,  1.640097457241883e+00 ,  1.491484345212421e+00 ,  1.236851733837826e+00 ,  5.405111652925707e-01 ,  1.360710787966147e+00 ,  1.439290005698094e+00 ,  1.899076985882573e+00 ,  2.207127188738190e+00 ,  1.640097457241883e+00 ,  1.439290005698094e+00 ,  2.682633976423498e+00 ;
w.d.diagonal() <<  9.693881604049188e-01 ,  6.133268205467090e-01 ,  4.426063286462090e-02 ,  4.055144158407464e-03 ,  1.339725270491339e-01 ,  9.410022713958340e-01 ,  3.028605620290723e-01 ,  3.661456016604264e-01 ,  8.981962445391883e-01 ,  3.143638049564507e-01 ,  5.489821840124055e-01 ,  4.360309576241223e-01 ,  6.499417612685054e-02 ,  5.845462257019302e-01 ,  8.440678976619022e-01 ,  1.564189183874064e-01 ,  2.242989686860415e-01 ,  4.128702077148407e-01 ,  3.692486905862902e-02 ,  4.966034986165482e-01 ,  8.179828644296319e-01 ,  6.578909387591091e-01 ,  5.334837356527721e-01 ,  8.551257407736000e-01 ,  1.496881349714015e-01 ,  5.672354768631239e-01 ,  3.741748177480889e-01 ,  6.013045471136395e-01 ,  1.129157018944362e-01 ,  7.755127010728279e-01 ,  9.660583318435267e-02 ,  1.663637457932475e-01 ,  8.074497520247557e-01 ,  9.476939242234907e-01 ,  4.332315025514858e-01 ,  4.140808317483012e-01 ,  2.454818761407551e-01 ,  2.747033919655770e-01 ,  6.172527709741663e-01 ,  1.784604107207253e-01 ,  1.194825043307771e-01 ,  4.557348586810382e-01 ,  1.649378065796322e-01 ,  6.487248312162270e-01 ,  8.210556743614970e-01 ,  7.775113893753993e-01 ,  4.801333902243475e-01 ,  3.475712562208170e-01 ,  4.347105489944344e-01 ,  5.008574909348362e-03 ,  7.125732007896374e-01 ,  3.316572226354955e-01 ,  3.194232377605339e-01 ,  7.992503242021254e-02 ,  4.480559260010161e-01 ,  5.828489673005941e-01 ,  3.905869418428840e-01 ,  8.695455453974028e-01 ,  6.733532167485129e-01 ,  2.414082418108049e-01 ,  5.253538488765902e-01 ,  9.105338176465975e-01 ,  5.201096943214129e-01 ,  6.021048687389493e-01 ,  6.277362381152096e-02 ,  4.893861165217643e-01 ,  4.614412627964344e-01 ,  4.011298800689024e-01 ,  4.204353581465221e-01 ,  5.849350493343958e-01 ,  5.386670484231432e-01 ,  4.898957587909363e-01 ,  1.657964405322077e-01 ,  4.413468174535875e-01 ,  9.686781985609425e-01 ,  4.151736932178327e-01 ,  3.531782978783116e-02 ,  2.830426682370324e-03 ,  5.354184513162129e-01 ,  5.057294182209637e-02 ,  9.274340534219172e-02 ,  1.087564126269691e-01 ,  4.540783303488197e-01 ,  9.926880657637538e-01 ,  4.850553508050713e-01 ,  4.586402838083844e-01 ,  4.365108145371187e-01 ,  5.011121848422556e-01 ,  4.470874692740242e-01 ,  7.262152005666610e-01 ,  8.979415356273188e-01 ,  6.978703473377672e-01 ,  4.233106026677405e-01 ,  6.495291182373754e-01 ,  9.095405975236686e-01 ,  1.536273415359948e-01 ,  2.373424569000443e-01 ,  6.191120001144675e-01 ,  6.870199456481508e-01 ,  6.426002227117794e-01 ;

// Solve
KQP_KKTPreSolver<Scalar> kkt_presolver(g);
boost::shared_ptr<cvxopt::KKTSolver<Scalar> > kktSolver(kkt_presolver.get(w));
kktSolver->solve(x,y,z);


// Solution
Eigen::VectorXd s_x(n*(r+1)), s_z(2*n*r);
s_x <<  1.916314225353135e-01 ,  2.221787076077385e-01 ,  1.653896713317812e-01 ,  -6.483544014018283e-02 ,  -1.149221413372893e-01 ,  -7.382126130568167e-02 ,  1.318636017936666e-01 ,  1.607939674636689e-01 ,  4.069003370969570e-01 ,  -3.442971547080212e-01 ,  1.470516843491386e-01 ,  2.110555923497029e-01 ,  -2.765178525216014e-01 ,  -1.781325450737145e-01 ,  2.012389237779219e-01 ,  -3.845209738196022e-01 ,  3.594946934856500e-01 ,  2.470811125508889e-02 ,  -1.718646774147286e-01 ,  2.558792849409299e-01 ,  2.119190881437352e-01 ,  2.456661135850774e-01 ,  -3.296013128158349e-01 ,  7.001793944247617e-02 ,  8.326110759733751e-02 ,  1.797432727037013e-01 ,  -8.076149174741887e-02 ,  -5.400902727712141e-02 ,  -1.347435757705595e-01 ,  6.094244082512274e-02 ,  -3.675162970585139e-02 ,  1.724836726452127e-01 ,  -2.465085462878327e-01 ,  3.040605518644618e-01 ,  -2.470321751188647e-02 ,  2.373861924815819e-01 ,  -1.860052923453456e-01 ,  -2.643591590131702e-01 ,  2.973434240317328e-02 ,  1.578136903987200e-01 ,  -5.413930897845349e-01 ,  1.575873766379907e-01 ,  6.782258918645361e-02 ,  -2.103641988449516e-01 ,  8.884502029387149e-02 ,  2.988220446241003e-01 ,  -2.146759109067942e-01 ,  2.225117432376691e-01 ,  1.575291072822295e-02 ,  3.207675407179076e-01 ,  -2.765050268763742e-01 ,  -6.455853015061780e-01 ,  -5.124182600629289e-01 ,  -6.616931196669744e-01 ,  -3.709596236508291e-01 ;
s_z <<  -1.843930701780025e-01 ,  -2.973796695862738e-02 ,  1.243253472337317e-01 ,  -4.397895897653117e-03 ,  2.452170046020562e-02 ,  -1.024857143702242e-01 ,  1.212228019008836e-01 ,  -3.503717633367439e-01 ,  -4.841324161691182e-01 ,  -1.460381536305907e-02 ,  -1.223434294891897e+00 ,  6.713474582189646e-02 ,  -7.083323921936842e-02 ,  -2.136704946149638e-01 ,  -9.746001643591605e-01 ,  -3.812173224891939e-01 ,  9.835174942242595e-01 ,  -8.709186866162461e-01 ,  -7.851550063028284e-02 ,  1.988760046746430e-01 ,  -3.216201725262294e-01 ,  1.182900740216188e-01 ,  1.904040247098998e-01 ,  -2.178756526115966e-02 ,  3.591780905713720e-02 ,  -1.579658025172360e-01 ,  1.490790867892860e+00 ,  7.832537777758203e-01 ,  5.193216323373865e-02 ,  -8.068450251350849e-01 ,  9.666115925508814e-01 ,  -1.633835916640862e+00 ,  -2.380543378269077e-01 ,  1.750621569965216e-01 ,  -4.067839241954985e-01 ,  -9.664631053732927e-01 ,  -5.836289664122927e-01 ,  -3.378716634985535e-01 ,  9.978256757698099e-01 ,  6.622566269211094e-02 ,  -2.518022050146309e-01 ,  -1.892397451060602e-01 ,  -4.742614693445731e-01 ,  9.594783081770335e-02 ,  -5.869603206013851e-01 ,  -1.256654732676993e+00 ,  1.111280699541428e+00 ,  6.969865382509227e-01 ,  -1.066055941860798e-01 ,  1.078826491078396e-02 ,  -1.361863939585575e-01 ,  2.420467847549223e-02 ,  8.790208669971115e-01 ,  -5.381493248033883e-02 ,  1.888320542406974e-01 ,  7.711785014972970e-02 ,  4.388109613208401e-01 ,  -2.199665547365594e-01 ,  1.021090997363876e-01 ,  -1.854229163226696e-02 ,  -9.468391969028669e-01 ,  3.794726050292874e-01 ,  -2.181371779532092e-01 ,  1.430745935623458e-01 ,  -9.065764700853580e-02 ,  -9.311928096636477e-01 ,  1.862796178127857e+00 ,  -8.187797728479086e-01 ,  -5.153253487982287e-01 ,  2.903564873835165e-02 ,  -4.346560947650248e-01 ,  -1.934584804177996e-01 ,  4.658752791772910e-02 ,  -2.094899168746377e-01 ,  -3.799854032111618e-01 ,  2.719355215536911e-01 ,  1.712228278597901e-01 ,  4.991743216240536e-03 ,  6.212211859356767e-01 ,  -1.968459840726650e-02 ,  9.401695562847263e-01 ,  -1.049447508732442e+00 ,  1.727594796260938e-01 ,  3.343167223030398e-01 ,  -4.613001362762150e-01 ,  -1.004635770116181e+00 ,  -7.652000351890937e-01 ,  -2.237657902459315e-01 ,  7.052562317253354e-01 ,  6.594122394912442e-01 ,  -3.527242910613257e-01 ,  7.052875039842794e-01 ,  -8.730938719122974e-01 ,  6.185817780705976e-01 ,  3.112136003699260e-01 ,  -3.961471967845341e-01 ,  2.968182623115427e-01 ,  8.873240600158699e-01 ,  -3.929126357831931e-01 ,  1.009893547842582e+00 ;

            Scalar error_x = (x - s_x).norm() / (Scalar)x.rows();
            Scalar error_z = (z - s_z).norm() / (Scalar)z.rows();

            KQP_LOG_INFO(logger, "Average error (x): " << convert(error_x));
            KQP_LOG_INFO(logger, "Average error (z): " << convert(error_z));
            KQP_LOG_ASSERT(logger, error_x < EPSILON, "Error for x is too high");
            KQP_LOG_ASSERT(logger, error_z < EPSILON, "Error for z is too high");
            return 0;
        }

